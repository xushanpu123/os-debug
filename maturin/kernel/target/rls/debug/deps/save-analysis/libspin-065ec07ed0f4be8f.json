{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4","program":"/home/xsp/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","spin","/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"barrier\"","--cfg","feature=\"default\"","--cfg","feature=\"lazy\"","--cfg","feature=\"lock_api\"","--cfg","feature=\"lock_api_crate\"","--cfg","feature=\"mutex\"","--cfg","feature=\"once\"","--cfg","feature=\"rwlock\"","--cfg","feature=\"spin_mutex\"","--cfg","feature=\"ticket_mutex\"","--cfg","feature=\"use_ticket_mutex\"","-C","metadata=065ec07ed0f4be8f","-C","extra-filename=-065ec07ed0f4be8f","--out-dir","/home/xsp/mylab/maturin/kernel/target/rls/debug/deps","-L","dependency=/home/xsp/mylab/maturin/kernel/target/rls/debug/deps","--extern","lock_api_crate=/home/xsp/mylab/maturin/kernel/target/rls/debug/deps/liblock_api-42e3bfb4f6d0760f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/xsp/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu"],"output":"/home/xsp/mylab/maturin/kernel/target/rls/debug/deps/libspin-065ec07ed0f4be8f.rmeta"},"prelude":{"crate_id":{"name":"spin","disambiguator":[17811428288499539413,0]},"crate_root":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src","external_crates":[{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[3092364855445609347,0]}},{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9990486623459429287,0]}},{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14554122218834081903,0]}},{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","num":4,"id":{"name":"lock_api","disambiguator":[2805270040493712507,0]}},{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","num":5,"id":{"name":"scopeguard","disambiguator":[3751225928103286464,0]}}],"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":0,"byte_end":8957,"line_start":1,"line_end":194,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":126},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19993,"byte_end":20002,"line_start":21,"line_end":21,"column_start":22,"column_end":31},"alias_span":null,"name":"SpinMutex","value":"","parent":{"krate":0,"index":93}},{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":20004,"byte_end":20018,"line_start":21,"line_end":21,"column_start":33,"column_end":47},"alias_span":null,"name":"SpinMutexGuard","value":"","parent":{"krate":0,"index":93}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":20239,"byte_end":20250,"line_start":28,"line_end":28,"column_start":24,"column_end":35},"alias_span":null,"name":"TicketMutex","value":"","parent":{"krate":0,"index":93}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":20252,"byte_end":20268,"line_start":28,"line_end":28,"column_start":37,"column_end":53},"alias_span":null,"name":"TicketMutexGuard","value":"","parent":{"krate":0,"index":93}},{"kind":"Use","ref_id":{"krate":0,"index":372},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":3064,"byte_end":3074,"line_start":90,"line_end":90,"column_start":16,"column_end":26},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":592},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":3169,"byte_end":3184,"line_start":93,"line_end":93,"column_start":17,"column_end":32},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":774},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":3202,"byte_end":3206,"line_start":94,"line_end":94,"column_start":17,"column_end":21},"alias_span":null,"name":"Spin","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":775},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":3202,"byte_end":3206,"line_start":94,"line_end":94,"column_start":17,"column_end":21},"alias_span":null,"name":"Spin","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":772},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":3208,"byte_end":3221,"line_start":94,"line_end":94,"column_start":23,"column_end":36},"alias_span":null,"name":"RelaxStrategy","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":0,"byte_end":8957,"line_start":1,"line_end":194,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":36},{"krate":0,"index":93},{"krate":0,"index":434},{"krate":0,"index":548},{"krate":0,"index":771},{"krate":0,"index":782},{"krate":0,"index":785},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":799},{"krate":0,"index":801},{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":808},{"krate":0,"index":811}],"decl_id":null,"docs":" This crate provides [spin-based](https://en.wikipedia.org/wiki/Spinlock) versions of the\n primitives in `std::sync` and `std::lazy`. Because synchronization is done through spinning,\n the primitives are suitable for use in `no_std` environments.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":50,"byte_end":56,"line_start":1,"line_end":1,"column_start":51,"column_end":57}},{"value":"deny(missing_docs)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":98,"byte_end":120,"line_start":3,"line_end":3,"column_start":1,"column_end":23}},{"value":"/ This crate provides [spin-based](https://en.wikipedia.org/wiki/Spinlock) versions of the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":122,"byte_end":214,"line_start":5,"line_end":5,"column_start":1,"column_end":93}},{"value":"/ primitives in `std::sync` and `std::lazy`. Because synchronization is done through spinning,","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":215,"byte_end":311,"line_start":6,"line_end":6,"column_start":1,"column_end":97}},{"value":"/ the primitives are suitable for use in `no_std` environments.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":312,"byte_end":377,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":378,"byte_end":381,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Features","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":382,"byte_end":396,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":397,"byte_end":400,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ - `Mutex`, `RwLock`, `Once`/`SyncOnceCell`, and `SyncLazy` equivalents","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":401,"byte_end":475,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":476,"byte_end":479,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ - Support for `no_std` environments","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":480,"byte_end":519,"line_start":13,"line_end":13,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":520,"byte_end":523,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ - [`lock_api`](https://crates.io/crates/lock_api) compatibility","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":524,"byte_end":591,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":592,"byte_end":595,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ - Upgradeable `RwLock` guards","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":596,"byte_end":629,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":630,"byte_end":633,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ - Guards can be sent and shared between threads","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":634,"byte_end":685,"line_start":19,"line_end":19,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":686,"byte_end":689,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ - Guard leaking","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":690,"byte_end":709,"line_start":21,"line_end":21,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":710,"byte_end":713,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - Ticket locks","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":714,"byte_end":732,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":733,"byte_end":736,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - Different strategies for dealing with contention","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":737,"byte_end":791,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":792,"byte_end":795,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Relationship with `std::sync`","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":796,"byte_end":831,"line_start":27,"line_end":27,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":832,"byte_end":835,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ While `spin` is not a drop-in replacement for `std::sync` (and","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":836,"byte_end":902,"line_start":29,"line_end":29,"column_start":1,"column_end":67}},{"value":"/ [should not be considered as such](https://matklad.github.io/2020/01/02/spinlocks-considered-harmful.html))","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":903,"byte_end":1014,"line_start":30,"line_end":30,"column_start":1,"column_end":112}},{"value":"/ an effort is made to keep this crate reasonably consistent with `std::sync`.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1015,"byte_end":1095,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1096,"byte_end":1099,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Many of the types defined in this crate have 'additional capabilities' when compared to `std::sync`:","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1100,"byte_end":1204,"line_start":33,"line_end":33,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1205,"byte_end":1208,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ - Because spinning does not depend on the thread-driven model of `std::sync`, guards ([`MutexGuard`],","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1209,"byte_end":1314,"line_start":35,"line_end":35,"column_start":1,"column_end":106}},{"value":"/   [`RwLockReadGuard`], [`RwLockWriteGuard`], etc.) may be sent and shared between threads.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1315,"byte_end":1409,"line_start":36,"line_end":36,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1410,"byte_end":1413,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ - [`RwLockUpgradableGuard`] supports being upgraded into a [`RwLockWriteGuard`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1414,"byte_end":1498,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1499,"byte_end":1502,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ - Guards support [leaking](https://doc.rust-lang.org/nomicon/leaking.html).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1503,"byte_end":1582,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1583,"byte_end":1586,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - [`Once`] owns the value returned by its `call_once` initializer.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1587,"byte_end":1657,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1658,"byte_end":1661,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ - [`RwLock`] supports counting readers and writers.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1662,"byte_end":1717,"line_start":44,"line_end":44,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1718,"byte_end":1721,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Conversely, the types in this crate do not have some of the features `std::sync` has:","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1722,"byte_end":1811,"line_start":46,"line_end":46,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1812,"byte_end":1815,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ - Locks do not track [panic poisoning](https://doc.rust-lang.org/nomicon/poisoning.html).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1816,"byte_end":1909,"line_start":48,"line_end":48,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1910,"byte_end":1913,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ## Feature flags","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1914,"byte_end":1934,"line_start":50,"line_end":50,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1935,"byte_end":1938,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The crate comes with a few feature flags that you may wish to use.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":1939,"byte_end":2009,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2010,"byte_end":2013,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ - `lock_api` enables support for [`lock_api`](https://crates.io/crates/lock_api)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2014,"byte_end":2098,"line_start":54,"line_end":54,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2099,"byte_end":2102,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ - `ticket_mutex` uses a ticket lock for the implementation of `Mutex`","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2103,"byte_end":2176,"line_start":56,"line_end":56,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2177,"byte_end":2180,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ - `std` enables support for thread yielding instead of spinning","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2181,"byte_end":2248,"line_start":58,"line_end":58,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"barrier","qualname":"::barrier","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34}],"decl_id":null,"docs":" Synchronization primitive allowing multiple threads to synchronize the\n beginning of some computation.","sig":null,"attributes":[{"value":"cfg(feature = \"barrier\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2505,"byte_end":2532,"line_start":71,"line_end":71,"column_start":1,"column_end":28}},{"value":"/ Synchronization primitive allowing multiple threads to synchronize the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":8959,"byte_end":9033,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/ beginning of some computation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9034,"byte_end":9068,"line_start":2,"line_end":2,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9069,"byte_end":9072,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Implementation adapted from the 'Barrier' type of the standard library. See:","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9073,"byte_end":9153,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ <https://doc.rust-lang.org/std/sync/struct.Barrier.html>","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9154,"byte_end":9214,"line_start":5,"line_end":5,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9215,"byte_end":9218,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Copyright 2014 The Rust Project Developers. See the COPYRIGHT","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9219,"byte_end":9284,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/ file at the top-level directory of this distribution and at","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9285,"byte_end":9348,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/ <http://rust-lang.org/COPYRIGHT>.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9349,"byte_end":9386,"line_start":9,"line_end":9,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9387,"byte_end":9390,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9391,"byte_end":9460,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ <http://www.apache.org/licenses/LICENSE-2.0>> or the MIT license","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9461,"byte_end":9529,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ <LICENSE-MIT or <http://opensource.org/licenses/MIT>>, at your","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9530,"byte_end":9596,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ option. This file may not be copied, modified, or distributed","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9597,"byte_end":9662,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ except according to those terms.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9663,"byte_end":9699,"line_start":15,"line_end":15,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":18},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10449,"byte_end":10456,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"Barrier","qualname":"::barrier::Barrier","value":"Barrier {  }","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21}],"decl_id":null,"docs":" A primitive that synchronizes the execution of multiple threads.","sig":null,"attributes":[{"value":"/ A primitive that synchronizes the execution of multiple threads.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9750,"byte_end":9818,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9819,"byte_end":9822,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9823,"byte_end":9836,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9837,"byte_end":9840,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9841,"byte_end":9848,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9849,"byte_end":9862,"line_start":24,"line_end":24,"column_start":1,"column_end":14}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9863,"byte_end":9886,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9887,"byte_end":9907,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9908,"byte_end":9911,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let mut handles = Vec::with_capacity(10);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9912,"byte_end":9957,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"/ let barrier = Arc::new(spin::Barrier::new(10));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":9958,"byte_end":10009,"line_start":29,"line_end":29,"column_start":1,"column_end":52}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10010,"byte_end":10030,"line_start":30,"line_end":30,"column_start":1,"column_end":21}},{"value":"/     let c = barrier.clone();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10031,"byte_end":10063,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/     // The same messages will be printed together.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10064,"byte_end":10118,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/     // You will NOT see any interleaving.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10119,"byte_end":10164,"line_start":33,"line_end":33,"column_start":1,"column_end":46}},{"value":"/     handles.push(thread::spawn(move|| {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10165,"byte_end":10208,"line_start":34,"line_end":34,"column_start":1,"column_end":44}},{"value":"/         println!(\"before wait\");","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10209,"byte_end":10245,"line_start":35,"line_end":35,"column_start":1,"column_end":37}},{"value":"/         c.wait();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10246,"byte_end":10267,"line_start":36,"line_end":36,"column_start":1,"column_end":22}},{"value":"/         println!(\"after wait\");","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10268,"byte_end":10303,"line_start":37,"line_end":37,"column_start":1,"column_end":36}},{"value":"/     }));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10304,"byte_end":10316,"line_start":38,"line_end":38,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10317,"byte_end":10322,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/ // Wait for other threads to finish.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10323,"byte_end":10363,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ for handle in handles {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10364,"byte_end":10391,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/     handle.join().unwrap();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10392,"byte_end":10423,"line_start":42,"line_end":42,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10424,"byte_end":10429,"line_start":43,"line_end":43,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10430,"byte_end":10437,"line_start":44,"line_end":44,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":25},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10989,"byte_end":11006,"line_start":70,"line_end":70,"column_start":12,"column_end":29},"name":"BarrierWaitResult","qualname":"::barrier::BarrierWaitResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`]\n have rendezvoused.","sig":null,"attributes":[{"value":"/ A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`]","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10638,"byte_end":10723,"line_start":56,"line_end":56,"column_start":1,"column_end":86}},{"value":"/ have rendezvoused.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10724,"byte_end":10746,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10747,"byte_end":10750,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`wait`]: struct.Barrier.html#method.wait","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10751,"byte_end":10796,"line_start":59,"line_end":59,"column_start":1,"column_end":46}},{"value":"/ [`Barrier`]: struct.Barrier.html","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10797,"byte_end":10833,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10834,"byte_end":10837,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10838,"byte_end":10852,"line_start":62,"line_end":62,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10853,"byte_end":10856,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10857,"byte_end":10864,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10865,"byte_end":10878,"line_start":65,"line_end":65,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10879,"byte_end":10882,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let barrier = spin::Barrier::new(1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10883,"byte_end":10923,"line_start":67,"line_end":67,"column_start":1,"column_end":41}},{"value":"/ let barrier_wait_result = barrier.wait();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10924,"byte_end":10969,"line_start":68,"line_end":68,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":10970,"byte_end":10977,"line_start":69,"line_end":69,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12384,"byte_end":12388,"line_start":110,"line_end":110,"column_start":12,"column_end":16},"name":"wait","qualname":"<Barrier<R>>::wait","value":"pub fn wait(&Self) -> BarrierWaitResult","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until all threads have rendezvoused here.","sig":null,"attributes":[{"value":"/ Blocks the current thread until all threads have rendezvoused here.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11055,"byte_end":11126,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11131,"byte_end":11134,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Barriers are re-usable after all threads have rendezvoused once, and can","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11139,"byte_end":11215,"line_start":75,"line_end":75,"column_start":5,"column_end":81}},{"value":"/ be used continuously.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11220,"byte_end":11245,"line_start":76,"line_end":76,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11250,"byte_end":11253,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ A single (arbitrary) thread will receive a [`BarrierWaitResult`] that","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11258,"byte_end":11331,"line_start":78,"line_end":78,"column_start":5,"column_end":78}},{"value":"/ returns `true` from [`is_leader`] when returning from this function, and","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11336,"byte_end":11412,"line_start":79,"line_end":79,"column_start":5,"column_end":81}},{"value":"/ all other threads will receive a result that will return `false` from","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11417,"byte_end":11490,"line_start":80,"line_end":80,"column_start":5,"column_end":78}},{"value":"/ [`is_leader`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11495,"byte_end":11513,"line_start":81,"line_end":81,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11518,"byte_end":11521,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ [`BarrierWaitResult`]: struct.BarrierWaitResult.html","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11526,"byte_end":11582,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"/ [`is_leader`]: struct.BarrierWaitResult.html#method.is_leader","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11587,"byte_end":11652,"line_start":84,"line_end":84,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11657,"byte_end":11660,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11665,"byte_end":11679,"line_start":86,"line_end":86,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11684,"byte_end":11687,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11692,"byte_end":11699,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11704,"byte_end":11717,"line_start":89,"line_end":89,"column_start":5,"column_end":18}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11722,"byte_end":11745,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/ use std::thread;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11750,"byte_end":11770,"line_start":91,"line_end":91,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11775,"byte_end":11778,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ let mut handles = Vec::with_capacity(10);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11783,"byte_end":11828,"line_start":93,"line_end":93,"column_start":5,"column_end":50}},{"value":"/ let barrier = Arc::new(spin::Barrier::new(10));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11833,"byte_end":11884,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11889,"byte_end":11909,"line_start":95,"line_end":95,"column_start":5,"column_end":25}},{"value":"/     let c = barrier.clone();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11914,"byte_end":11946,"line_start":96,"line_end":96,"column_start":5,"column_end":37}},{"value":"/     // The same messages will be printed together.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11951,"byte_end":12005,"line_start":97,"line_end":97,"column_start":5,"column_end":59}},{"value":"/     // You will NOT see any interleaving.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12010,"byte_end":12055,"line_start":98,"line_end":98,"column_start":5,"column_end":50}},{"value":"/     handles.push(thread::spawn(move|| {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12060,"byte_end":12103,"line_start":99,"line_end":99,"column_start":5,"column_end":48}},{"value":"/         println!(\"before wait\");","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12108,"byte_end":12144,"line_start":100,"line_end":100,"column_start":5,"column_end":41}},{"value":"/         c.wait();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12149,"byte_end":12170,"line_start":101,"line_end":101,"column_start":5,"column_end":26}},{"value":"/         println!(\"after wait\");","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12175,"byte_end":12210,"line_start":102,"line_end":102,"column_start":5,"column_end":40}},{"value":"/     }));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12215,"byte_end":12227,"line_start":103,"line_end":103,"column_start":5,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12232,"byte_end":12237,"line_start":104,"line_end":104,"column_start":5,"column_end":10}},{"value":"/ // Wait for other threads to finish.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12242,"byte_end":12282,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/ for handle in handles {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12287,"byte_end":12314,"line_start":106,"line_end":106,"column_start":5,"column_end":32}},{"value":"/     handle.join().unwrap();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12319,"byte_end":12350,"line_start":107,"line_end":107,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12355,"byte_end":12360,"line_start":108,"line_end":108,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":12365,"byte_end":12372,"line_start":109,"line_end":109,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13658,"byte_end":13661,"line_start":151,"line_end":151,"column_start":18,"column_end":21},"name":"new","qualname":"<Barrier<R>>::new","value":"pub const fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new barrier that can block a given number of threads.","sig":null,"attributes":[{"value":"/ Creates a new barrier that can block a given number of threads.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13161,"byte_end":13228,"line_start":136,"line_end":136,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13233,"byte_end":13236,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ A barrier will block `n`-1 threads which call [`wait`] and then wake up","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13241,"byte_end":13316,"line_start":138,"line_end":138,"column_start":5,"column_end":80}},{"value":"/ all threads at once when the `n`th thread calls [`wait`]. A Barrier created","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13321,"byte_end":13400,"line_start":139,"line_end":139,"column_start":5,"column_end":84}},{"value":"/ with n = 0 will behave identically to one created with n = 1.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13405,"byte_end":13470,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13475,"byte_end":13478,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ [`wait`]: #method.wait","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13483,"byte_end":13509,"line_start":142,"line_end":142,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13514,"byte_end":13517,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13522,"byte_end":13536,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13541,"byte_end":13544,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13549,"byte_end":13556,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13561,"byte_end":13574,"line_start":147,"line_end":147,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13579,"byte_end":13582,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let barrier = spin::Barrier::new(10);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13587,"byte_end":13628,"line_start":149,"line_end":149,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13633,"byte_end":13640,"line_start":150,"line_end":150,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14402,"byte_end":14411,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"is_leader","qualname":"<BarrierWaitResult>::is_leader","value":"pub fn is_leader(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this thread from [`wait`] is the \"leader thread\".","sig":null,"attributes":[{"value":"/ Returns whether this thread from [`wait`] is the \"leader thread\".","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13893,"byte_end":13962,"line_start":163,"line_end":163,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13967,"byte_end":13970,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Only one thread will have `true` returned from their result, all other","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13975,"byte_end":14049,"line_start":165,"line_end":165,"column_start":5,"column_end":79}},{"value":"/ threads will have `false` returned.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14054,"byte_end":14093,"line_start":166,"line_end":166,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14098,"byte_end":14101,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ [`wait`]: struct.Barrier.html#method.wait","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14106,"byte_end":14151,"line_start":168,"line_end":168,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14156,"byte_end":14159,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14164,"byte_end":14178,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14183,"byte_end":14186,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14191,"byte_end":14198,"line_start":172,"line_end":172,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14203,"byte_end":14216,"line_start":173,"line_end":173,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14221,"byte_end":14224,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let barrier = spin::Barrier::new(1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14229,"byte_end":14269,"line_start":175,"line_end":175,"column_start":5,"column_end":45}},{"value":"/ let barrier_wait_result = barrier.wait();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14274,"byte_end":14319,"line_start":176,"line_end":176,"column_start":5,"column_end":50}},{"value":"/ println!(\"{:?}\", barrier_wait_result.is_leader());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14324,"byte_end":14378,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":14383,"byte_end":14390,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lazy","qualname":"::lazy","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":63},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":77},{"krate":0,"index":83},{"krate":0,"index":89}],"decl_id":null,"docs":" Synchronization primitives for lazy evaluation.","sig":null,"attributes":[{"value":"cfg(feature = \"lazy\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2601,"byte_end":2625,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/ Synchronization primitives for lazy evaluation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":15761,"byte_end":15812,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":15813,"byte_end":15816,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Implementation adapted from the `SyncLazy` type of the standard library. See:","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":15817,"byte_end":15898,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/ <https://doc.rust-lang.org/std/lazy/struct.SyncLazy.html>","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":15899,"byte_end":15960,"line_start":4,"line_end":4,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":57},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16851,"byte_end":16855,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Lazy","qualname":"::lazy::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16050,"byte_end":16103,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16104,"byte_end":16107,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This type is a thread-safe `Lazy`, and can be used in statics.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16108,"byte_end":16174,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16175,"byte_end":16178,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16179,"byte_end":16193,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16194,"byte_end":16197,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16198,"byte_end":16205,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16206,"byte_end":16240,"line_start":16,"line_end":16,"column_start":1,"column_end":35}},{"value":"/ use spin::Lazy;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16241,"byte_end":16260,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16261,"byte_end":16264,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ static HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16265,"byte_end":16328,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16329,"byte_end":16362,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16363,"byte_end":16398,"line_start":21,"line_end":21,"column_start":1,"column_end":36}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16399,"byte_end":16441,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16442,"byte_end":16485,"line_start":23,"line_end":23,"column_start":1,"column_end":44}},{"value":"/     m","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16486,"byte_end":16495,"line_start":24,"line_end":24,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16496,"byte_end":16503,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16504,"byte_end":16507,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16508,"byte_end":16523,"line_start":27,"line_end":27,"column_start":1,"column_end":16}},{"value":"/     println!(\"ready\");","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16524,"byte_end":16550,"line_start":28,"line_end":28,"column_start":1,"column_end":27}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16551,"byte_end":16582,"line_start":29,"line_end":29,"column_start":1,"column_end":32}},{"value":"/         println!(\"{:?}\", HASHMAP.get(&13));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16583,"byte_end":16630,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/     }).join().unwrap();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16631,"byte_end":16658,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"/     println!(\"{:?}\", HASHMAP.get(&74));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16659,"byte_end":16702,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16703,"byte_end":16706,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     // Prints:","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16707,"byte_end":16725,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/     //   ready","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16726,"byte_end":16744,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/     //   initializing","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16745,"byte_end":16770,"line_start":36,"line_end":36,"column_start":1,"column_end":26}},{"value":"/     //   Some(\"Spica\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16771,"byte_end":16797,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"/     //   Some(\"Hoyten\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16798,"byte_end":16825,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16826,"byte_end":16831,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16832,"byte_end":16839,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17631,"byte_end":17634,"line_start":63,"line_end":63,"column_start":18,"column_end":21},"name":"new","qualname":"<Lazy<T, F, R>>::new","value":"pub const fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing\n function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17539,"byte_end":17595,"line_start":61,"line_end":61,"column_start":5,"column_end":61}},{"value":"/ function.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17600,"byte_end":17613,"line_start":62,"line_end":62,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18052,"byte_end":18062,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<Lazy<T, F, R>>::as_mut_ptr","value":"pub fn as_mut_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a mutable pointer to the inner data.","sig":null,"attributes":[{"value":"/ Retrieves a mutable pointer to the inner data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17722,"byte_end":17772,"line_start":66,"line_end":66,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17777,"byte_end":17780,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This is especially useful when interfacing with low level code or FFI where the caller","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17785,"byte_end":17875,"line_start":68,"line_end":68,"column_start":5,"column_end":95}},{"value":"/ explicitly knows that it has exclusive access to the inner data. Note that reading from","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17880,"byte_end":17971,"line_start":69,"line_end":69,"column_start":5,"column_end":96}},{"value":"/ this pointer is UB until initialized or directly written to.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17976,"byte_end":18040,"line_start":70,"line_end":70,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18564,"byte_end":18569,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"name":"force","qualname":"<Lazy<T, F, R>>::force","value":"pub fn force(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a reference to result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18186,"byte_end":18234,"line_start":77,"line_end":77,"column_start":5,"column_end":53}},{"value":"/ returns a reference to result. This is equivalent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18239,"byte_end":18292,"line_start":78,"line_end":78,"column_start":5,"column_end":58}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18297,"byte_end":18338,"line_start":79,"line_end":79,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18343,"byte_end":18346,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18351,"byte_end":18365,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18370,"byte_end":18373,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18378,"byte_end":18385,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/ use spin::Lazy;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18390,"byte_end":18409,"line_start":84,"line_end":84,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18414,"byte_end":18417,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18422,"byte_end":18454,"line_start":86,"line_end":86,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18459,"byte_end":18462,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18467,"byte_end":18507,"line_start":88,"line_end":88,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18512,"byte_end":18540,"line_start":89,"line_end":89,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18545,"byte_end":18552,"line_start":90,"line_end":90,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":93},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mutex","qualname":"::mutex","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":376},{"krate":0,"index":381},{"krate":0,"index":385},{"krate":0,"index":393},{"krate":0,"index":397},{"krate":0,"index":401},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":413},{"krate":0,"index":417},{"krate":0,"index":422},{"krate":0,"index":426}],"decl_id":null,"docs":" Locks that have the same behaviour as a mutex.","sig":null,"attributes":[{"value":"cfg(feature = \"mutex\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2688,"byte_end":2713,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/ Locks that have the same behaviour as a mutex.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19125,"byte_end":19175,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19176,"byte_end":19179,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The [`Mutex`] in the root of the crate, can be configured using the `ticket_mutex` feature.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19180,"byte_end":19275,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ If it's enabled, [`TicketMutex`] and [`TicketMutexGuard`] will be re-exported as [`Mutex`]","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19276,"byte_end":19370,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ and [`MutexGuard`], otherwise the [`SpinMutex`] and guard will be re-exported.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19371,"byte_end":19453,"line_start":5,"line_end":5,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19454,"byte_end":19457,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ `ticket_mutex` is disabled by default.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19458,"byte_end":19500,"line_start":7,"line_end":7,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19501,"byte_end":19504,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`Mutex`]: ../struct.Mutex.html","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19505,"byte_end":19540,"line_start":9,"line_end":9,"column_start":1,"column_end":36}},{"value":"/ [`MutexGuard`]: ../struct.MutexGuard.html","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19541,"byte_end":19586,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/ [`TicketMutex`]: ./struct.TicketMutex.html","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19587,"byte_end":19633,"line_start":11,"line_end":11,"column_start":1,"column_end":47}},{"value":"/ [`TicketMutexGuard`]: ./struct.TicketMutexGuard.html","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19634,"byte_end":19690,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"/ [`SpinMutex`]: ./struct.SpinMutex.html","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19691,"byte_end":19733,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/ [`SpinMutexGuard`]: ./struct.SpinMutexGuard.html","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19734,"byte_end":19786,"line_start":14,"line_end":14,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":94},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spin","qualname":"::mutex::spin","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":132},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":149},{"krate":0,"index":153},{"krate":0,"index":160},{"krate":0,"index":166},{"krate":0,"index":170},{"krate":0,"index":174},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":199}],"decl_id":null,"docs":" A naïve spinning mutex.","sig":null,"attributes":[{"value":"cfg(feature = \"spin_mutex\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19788,"byte_end":19818,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ A naïve spinning mutex.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":28556,"byte_end":28584,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":28585,"byte_end":28588,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Waiting threads hammer an atomic variable until it becomes available. Best-case latency is low, but worst-case","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":28589,"byte_end":28703,"line_start":3,"line_end":3,"column_start":1,"column_end":115}},{"value":"/ latency is theoretically infinite.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":28704,"byte_end":28742,"line_start":4,"line_end":4,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":126},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30080,"byte_end":30089,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"SpinMutex","qualname":"::mutex::spin::SpinMutex","value":"SpinMutex {  }","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"decl_id":null,"docs":" A [spin lock](https://en.m.wikipedia.org/wiki/Spinlock) providing mutually exclusive access to data.","sig":null,"attributes":[{"value":"/ A [spin lock](https://en.m.wikipedia.org/wiki/Spinlock) providing mutually exclusive access to data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":28920,"byte_end":29024,"line_start":17,"line_end":17,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29025,"byte_end":29028,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29029,"byte_end":29042,"line_start":19,"line_end":19,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29043,"byte_end":29046,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29047,"byte_end":29054,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29055,"byte_end":29068,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29069,"byte_end":29072,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29073,"byte_end":29124,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29125,"byte_end":29128,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // Modify the data","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29129,"byte_end":29151,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ *lock.lock() = 2;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29152,"byte_end":29173,"line_start":27,"line_end":27,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29174,"byte_end":29177,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Read the data","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29178,"byte_end":29198,"line_start":29,"line_end":29,"column_start":1,"column_end":21}},{"value":"/ let answer = *lock.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29199,"byte_end":29229,"line_start":30,"line_end":30,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(answer, 2);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29230,"byte_end":29256,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29257,"byte_end":29264,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29265,"byte_end":29268,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Thread safety example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29269,"byte_end":29296,"line_start":34,"line_end":34,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29297,"byte_end":29300,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29301,"byte_end":29308,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29309,"byte_end":29322,"line_start":37,"line_end":37,"column_start":1,"column_end":14}},{"value":"/ use std::sync::{Arc, Barrier};","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29323,"byte_end":29357,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29358,"byte_end":29361,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let thread_count = 1000;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29362,"byte_end":29390,"line_start":40,"line_end":40,"column_start":1,"column_end":29}},{"value":"/ let spin_mutex = Arc::new(spin::mutex::SpinMutex::<_>::new(0));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29391,"byte_end":29458,"line_start":41,"line_end":41,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29459,"byte_end":29462,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ // We use a barrier to ensure the readout happens after all writing","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29463,"byte_end":29534,"line_start":43,"line_end":43,"column_start":1,"column_end":72}},{"value":"/ let barrier = Arc::new(Barrier::new(thread_count + 1));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29535,"byte_end":29594,"line_start":44,"line_end":44,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29595,"byte_end":29598,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ for _ in (0..thread_count) {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29599,"byte_end":29631,"line_start":46,"line_end":46,"column_start":1,"column_end":33}},{"value":"/     let my_barrier = barrier.clone();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29632,"byte_end":29673,"line_start":47,"line_end":47,"column_start":1,"column_end":42}},{"value":"/     let my_lock = spin_mutex.clone();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29674,"byte_end":29715,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/     std::thread::spawn(move || {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29716,"byte_end":29752,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/         let mut guard = my_lock.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29753,"byte_end":29796,"line_start":50,"line_end":50,"column_start":1,"column_end":44}},{"value":"/         *guard += 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29797,"byte_end":29821,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29822,"byte_end":29825,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/         // Release the lock to prevent a deadlock","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29826,"byte_end":29879,"line_start":53,"line_end":53,"column_start":1,"column_end":54}},{"value":"/         drop(guard);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29880,"byte_end":29904,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/         my_barrier.wait();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29905,"byte_end":29935,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/     });","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29936,"byte_end":29947,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29948,"byte_end":29953,"line_start":57,"line_end":57,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29954,"byte_end":29957,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ barrier.wait();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29958,"byte_end":29977,"line_start":59,"line_end":59,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29978,"byte_end":29981,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ let answer = { *spin_mutex.lock() };","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":29982,"byte_end":30022,"line_start":61,"line_end":61,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(answer, thread_count);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30023,"byte_end":30060,"line_start":62,"line_end":62,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30061,"byte_end":30068,"line_start":63,"line_end":63,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":132},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30329,"byte_end":30343,"line_start":73,"line_end":73,"column_start":12,"column_end":26},"name":"SpinMutexGuard","qualname":"::mutex::spin::SpinMutexGuard","value":"SpinMutexGuard {  }","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136}],"decl_id":null,"docs":" A guard that provides mutable data access.","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30203,"byte_end":30249,"line_start":70,"line_end":70,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30250,"byte_end":30253,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30254,"byte_end":30317,"line_start":72,"line_end":72,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31016,"byte_end":31019,"line_start":99,"line_end":99,"column_start":18,"column_end":21},"name":"new","qualname":"<SpinMutex<T, R>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`SpinMutex`] wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new [`SpinMutex`] wrapping the supplied data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30615,"byte_end":30674,"line_start":83,"line_end":83,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30679,"byte_end":30682,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30687,"byte_end":30700,"line_start":85,"line_end":85,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30705,"byte_end":30708,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30713,"byte_end":30720,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"/ use spin::mutex::SpinMutex;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30725,"byte_end":30756,"line_start":88,"line_end":88,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30761,"byte_end":30764,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ static MUTEX: SpinMutex<()> = SpinMutex::<_>::new(());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30769,"byte_end":30827,"line_start":90,"line_end":90,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30832,"byte_end":30835,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30840,"byte_end":30855,"line_start":92,"line_end":92,"column_start":5,"column_end":20}},{"value":"/     let lock = MUTEX.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30860,"byte_end":30892,"line_start":93,"line_end":93,"column_start":5,"column_end":37}},{"value":"/     // do something with lock","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30897,"byte_end":30930,"line_start":94,"line_end":94,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30935,"byte_end":30954,"line_start":95,"line_end":95,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30959,"byte_end":30964,"line_start":96,"line_end":96,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30969,"byte_end":30976,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30981,"byte_end":30998,"line_start":98,"line_end":98,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31453,"byte_end":31463,"line_start":116,"line_end":116,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SpinMutex<T, R>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this [`SpinMutex`] and unwraps the underlying data.","sig":null,"attributes":[{"value":"/ Consumes this [`SpinMutex`] and unwraps the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31197,"byte_end":31261,"line_start":107,"line_end":107,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31266,"byte_end":31269,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31274,"byte_end":31287,"line_start":109,"line_end":109,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31292,"byte_end":31295,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31300,"byte_end":31307,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31312,"byte_end":31364,"line_start":112,"line_end":112,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(42, lock.into_inner());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31369,"byte_end":31407,"line_start":113,"line_end":113,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31412,"byte_end":31419,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31424,"byte_end":31441,"line_start":115,"line_end":115,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32337,"byte_end":32347,"line_start":145,"line_end":145,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<SpinMutex<T, R>>::as_mut_ptr","value":"pub fn as_mut_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31677,"byte_end":31730,"line_start":123,"line_end":123,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31735,"byte_end":31738,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ This is mostly meant to be used for applications which require manual unlocking, but where","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31743,"byte_end":31837,"line_start":125,"line_end":125,"column_start":5,"column_end":99}},{"value":"/ storing both the lock and the pointer to the inner data gets inefficient.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31842,"byte_end":31919,"line_start":126,"line_end":126,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31924,"byte_end":31927,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31932,"byte_end":31945,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31950,"byte_end":31957,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":31962,"byte_end":32014,"line_start":130,"line_end":130,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32019,"byte_end":32022,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32027,"byte_end":32039,"line_start":132,"line_end":132,"column_start":5,"column_end":17}},{"value":"/     core::mem::forget(lock.lock());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32044,"byte_end":32083,"line_start":133,"line_end":133,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32088,"byte_end":32091,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(lock.as_mut_ptr().read(), 42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32096,"byte_end":32145,"line_start":135,"line_end":135,"column_start":5,"column_end":54}},{"value":"/     lock.as_mut_ptr().write(58);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32150,"byte_end":32186,"line_start":136,"line_end":136,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32191,"byte_end":32194,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/     lock.force_unlock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32199,"byte_end":32227,"line_start":138,"line_end":138,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32232,"byte_end":32237,"line_start":139,"line_end":139,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32242,"byte_end":32245,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*lock.lock(), 58);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32250,"byte_end":32283,"line_start":141,"line_end":141,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32288,"byte_end":32291,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32296,"byte_end":32303,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32308,"byte_end":32325,"line_start":144,"line_end":144,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33028,"byte_end":33032,"line_start":166,"line_end":166,"column_start":12,"column_end":16},"name":"lock","qualname":"<SpinMutex<T, R>>::lock","value":"pub fn lock(&Self) -> SpinMutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks the [`SpinMutex`] and returns a guard that permits access to the inner data.","sig":null,"attributes":[{"value":"/ Locks the [`SpinMutex`] and returns a guard that permits access to the inner data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32456,"byte_end":32542,"line_start":151,"line_end":151,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32547,"byte_end":32550,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ The returned value may be dereferenced for data access","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32555,"byte_end":32613,"line_start":153,"line_end":153,"column_start":5,"column_end":63}},{"value":"/ and the lock will be dropped when the guard falls out of scope.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32618,"byte_end":32685,"line_start":154,"line_end":154,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32690,"byte_end":32693,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32698,"byte_end":32705,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32710,"byte_end":32761,"line_start":157,"line_end":157,"column_start":5,"column_end":56}},{"value":"/ {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32766,"byte_end":32771,"line_start":158,"line_end":158,"column_start":5,"column_end":10}},{"value":"/     let mut data = lock.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32776,"byte_end":32811,"line_start":159,"line_end":159,"column_start":5,"column_end":40}},{"value":"/     // The lock is now locked and the data can be accessed","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32816,"byte_end":32878,"line_start":160,"line_end":160,"column_start":5,"column_end":67}},{"value":"/     *data += 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32883,"byte_end":32902,"line_start":161,"line_end":161,"column_start":5,"column_end":24}},{"value":"/     // The lock is implicitly dropped at the end of the scope","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32907,"byte_end":32972,"line_start":162,"line_end":162,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32977,"byte_end":32982,"line_start":163,"line_end":163,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32987,"byte_end":32994,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32999,"byte_end":33016,"line_start":165,"line_end":165,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33980,"byte_end":33989,"line_start":191,"line_end":191,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<SpinMutex<T, R>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the lock is currently held.","sig":null,"attributes":[{"value":"/ Returns `true` if the lock is currently held.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33630,"byte_end":33679,"line_start":184,"line_end":184,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33684,"byte_end":33687,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33692,"byte_end":33704,"line_start":186,"line_end":186,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33709,"byte_end":33712,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33717,"byte_end":33826,"line_start":188,"line_end":188,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33831,"byte_end":33946,"line_start":189,"line_end":189,"column_start":5,"column_end":120}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33951,"byte_end":33968,"line_start":190,"line_end":190,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34384,"byte_end":34396,"line_start":203,"line_end":203,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<SpinMutex<T, R>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock this [`SpinMutex`].","sig":null,"attributes":[{"value":"/ Force unlock this [`SpinMutex`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34060,"byte_end":34096,"line_start":195,"line_end":195,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34101,"byte_end":34104,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34109,"byte_end":34121,"line_start":197,"line_end":197,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34126,"byte_end":34129,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the lock is not held by the current","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34134,"byte_end":34203,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/ thread. However, this can be useful in some instances for exposing the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34208,"byte_end":34282,"line_start":200,"line_end":200,"column_start":5,"column_end":79}},{"value":"/ lock to FFI that doesn't know how to deal with RAII.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34287,"byte_end":34343,"line_start":201,"line_end":201,"column_start":5,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34348,"byte_end":34365,"line_start":202,"line_end":202,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34939,"byte_end":34947,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<SpinMutex<T, R>>::try_lock","value":"pub fn try_lock(&Self) -> Option<SpinMutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to lock this [`SpinMutex`], returning a lock guard if successful.","sig":null,"attributes":[{"value":"/ Try to lock this [`SpinMutex`], returning a lock guard if successful.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34468,"byte_end":34541,"line_start":207,"line_end":207,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34546,"byte_end":34549,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34554,"byte_end":34567,"line_start":209,"line_end":209,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34572,"byte_end":34575,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34580,"byte_end":34587,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34592,"byte_end":34644,"line_start":212,"line_end":212,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34649,"byte_end":34652,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ let maybe_guard = lock.try_lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34657,"byte_end":34695,"line_start":214,"line_end":214,"column_start":5,"column_end":43}},{"value":"/ assert!(maybe_guard.is_some());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34700,"byte_end":34735,"line_start":215,"line_end":215,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34740,"byte_end":34743,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ // `maybe_guard` is still held, so the second call fails","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34748,"byte_end":34808,"line_start":217,"line_end":217,"column_start":5,"column_end":65}},{"value":"/ let maybe_guard2 = lock.try_lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34813,"byte_end":34852,"line_start":218,"line_end":218,"column_start":5,"column_end":44}},{"value":"/ assert!(maybe_guard2.is_none());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34857,"byte_end":34893,"line_start":219,"line_end":219,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34898,"byte_end":34905,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":34910,"byte_end":34927,"line_start":221,"line_end":221,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35999,"byte_end":36006,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SpinMutex<T, R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35438,"byte_end":35493,"line_start":235,"line_end":235,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35498,"byte_end":35501,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the [`SpinMutex`] mutably, and a mutable reference is guaranteed to be exclusive in","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35506,"byte_end":35617,"line_start":237,"line_end":237,"column_start":5,"column_end":116}},{"value":"/ Rust, no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist. As","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35622,"byte_end":35732,"line_start":238,"line_end":238,"column_start":5,"column_end":115}},{"value":"/ such, this is a 'zero-cost' operation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35737,"byte_end":35779,"line_start":239,"line_end":239,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35784,"byte_end":35787,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35792,"byte_end":35805,"line_start":241,"line_end":241,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35810,"byte_end":35813,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35818,"byte_end":35825,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"/ let mut lock = spin::mutex::SpinMutex::<_>::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35830,"byte_end":35885,"line_start":244,"line_end":244,"column_start":5,"column_end":60}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35890,"byte_end":35915,"line_start":245,"line_end":245,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*lock.lock(), 10);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35920,"byte_end":35953,"line_start":246,"line_end":246,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35958,"byte_end":35965,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":35970,"byte_end":35987,"line_start":248,"line_end":248,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37316,"byte_end":37320,"line_start":293,"line_end":293,"column_start":12,"column_end":16},"name":"leak","qualname":"<SpinMutexGuard>::leak","value":"pub fn leak(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36881,"byte_end":36958,"line_start":280,"line_end":280,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36963,"byte_end":36966,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original [`SpinMutex`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36971,"byte_end":37048,"line_start":282,"line_end":282,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37053,"byte_end":37056,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37061,"byte_end":37068,"line_start":284,"line_end":284,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::mutex::SpinMutex::<_>::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37073,"byte_end":37126,"line_start":285,"line_end":285,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37131,"byte_end":37134,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::mutex::SpinMutexGuard::leak(mylock.lock());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37139,"byte_end":37213,"line_start":287,"line_end":287,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37218,"byte_end":37221,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37226,"byte_end":37240,"line_start":289,"line_end":289,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37245,"byte_end":37270,"line_start":290,"line_end":290,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37275,"byte_end":37282,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37287,"byte_end":37304,"line_start":292,"line_end":292,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":214},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ticket","qualname":"::mutex::ticket","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":253},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":271},{"krate":0,"index":277},{"krate":0,"index":281},{"krate":0,"index":290},{"krate":0,"index":294},{"krate":0,"index":298},{"krate":0,"index":302},{"krate":0,"index":306},{"krate":0,"index":310},{"krate":0,"index":315},{"krate":0,"index":319},{"krate":0,"index":323}],"decl_id":null,"docs":" A ticket-based mutex.","sig":null,"attributes":[{"value":"cfg(feature = \"ticket_mutex\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":20022,"byte_end":20054,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ A ticket-based mutex.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":43067,"byte_end":43092,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":43093,"byte_end":43096,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Waiting threads take a 'ticket' from the lock in the order they arrive and gain access to the lock when their","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":43097,"byte_end":43210,"line_start":3,"line_end":3,"column_start":1,"column_end":114}},{"value":"/ ticket is next in the queue. Best-case latency is slightly worse than a regular spinning mutex, but worse-case","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":43211,"byte_end":43325,"line_start":4,"line_end":4,"column_start":1,"column_end":115}},{"value":"/ latency is infinitely better. Waiting threads simply need to wait for all threads that come before them in the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":43326,"byte_end":43440,"line_start":5,"line_end":5,"column_start":1,"column_end":115}},{"value":"/ queue to finish.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":43441,"byte_end":43461,"line_start":6,"line_end":6,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45232,"byte_end":45243,"line_start":74,"line_end":74,"column_start":12,"column_end":23},"name":"TicketMutex","qualname":"::mutex::ticket::TicketMutex","value":"TicketMutex {  }","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"decl_id":null,"docs":" A spin-based [ticket lock](https://en.wikipedia.org/wiki/Ticket_lock) providing mutually exclusive access to data.","sig":null,"attributes":[{"value":"/ A spin-based [ticket lock](https://en.wikipedia.org/wiki/Ticket_lock) providing mutually exclusive access to data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":43641,"byte_end":43759,"line_start":20,"line_end":20,"column_start":1,"column_end":119}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":43760,"byte_end":43763,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ A ticket lock is analagous to a queue management system for lock requests. When a thread tries to take a lock, it","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":43764,"byte_end":43881,"line_start":22,"line_end":22,"column_start":1,"column_end":118}},{"value":"/ is assigned a 'ticket'. It then spins until its ticket becomes next in line. When the lock guard is released, the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":43882,"byte_end":43999,"line_start":23,"line_end":23,"column_start":1,"column_end":118}},{"value":"/ next ticket will be processed.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44000,"byte_end":44034,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44035,"byte_end":44038,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Ticket locks significantly reduce the worse-case performance of locking at the cost of slightly higher average-time","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44039,"byte_end":44158,"line_start":26,"line_end":26,"column_start":1,"column_end":120}},{"value":"/ overhead.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44159,"byte_end":44172,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44173,"byte_end":44176,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44177,"byte_end":44190,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44191,"byte_end":44194,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44195,"byte_end":44202,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44203,"byte_end":44216,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44217,"byte_end":44220,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::mutex::TicketMutex::<_>::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44221,"byte_end":44274,"line_start":34,"line_end":34,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44275,"byte_end":44278,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // Modify the data","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44279,"byte_end":44301,"line_start":36,"line_end":36,"column_start":1,"column_end":23}},{"value":"/ *lock.lock() = 2;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44302,"byte_end":44323,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44324,"byte_end":44327,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ // Read the data","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44328,"byte_end":44348,"line_start":39,"line_end":39,"column_start":1,"column_end":21}},{"value":"/ let answer = *lock.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44349,"byte_end":44379,"line_start":40,"line_end":40,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(answer, 2);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44380,"byte_end":44406,"line_start":41,"line_end":41,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44407,"byte_end":44414,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44415,"byte_end":44418,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Thread safety example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44419,"byte_end":44446,"line_start":44,"line_end":44,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44447,"byte_end":44450,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44451,"byte_end":44458,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44459,"byte_end":44472,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/ use std::sync::{Arc, Barrier};","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44473,"byte_end":44507,"line_start":48,"line_end":48,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44508,"byte_end":44511,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ let thread_count = 1000;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44512,"byte_end":44540,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/ let spin_mutex = Arc::new(spin::mutex::TicketMutex::<_>::new(0));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44541,"byte_end":44610,"line_start":51,"line_end":51,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44611,"byte_end":44614,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // We use a barrier to ensure the readout happens after all writing","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44615,"byte_end":44686,"line_start":53,"line_end":53,"column_start":1,"column_end":72}},{"value":"/ let barrier = Arc::new(Barrier::new(thread_count + 1));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44687,"byte_end":44746,"line_start":54,"line_end":54,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44747,"byte_end":44750,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ for _ in (0..thread_count) {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44751,"byte_end":44783,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/     let my_barrier = barrier.clone();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44784,"byte_end":44825,"line_start":57,"line_end":57,"column_start":1,"column_end":42}},{"value":"/     let my_lock = spin_mutex.clone();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44826,"byte_end":44867,"line_start":58,"line_end":58,"column_start":1,"column_end":42}},{"value":"/     std::thread::spawn(move || {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44868,"byte_end":44904,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/         let mut guard = my_lock.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44905,"byte_end":44948,"line_start":60,"line_end":60,"column_start":1,"column_end":44}},{"value":"/         *guard += 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44949,"byte_end":44973,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44974,"byte_end":44977,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/         // Release the lock to prevent a deadlock","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":44978,"byte_end":45031,"line_start":63,"line_end":63,"column_start":1,"column_end":54}},{"value":"/         drop(guard);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45032,"byte_end":45056,"line_start":64,"line_end":64,"column_start":1,"column_end":25}},{"value":"/         my_barrier.wait();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45057,"byte_end":45087,"line_start":65,"line_end":65,"column_start":1,"column_end":31}},{"value":"/     });","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45088,"byte_end":45099,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45100,"byte_end":45105,"line_start":67,"line_end":67,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45106,"byte_end":45109,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ barrier.wait();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45110,"byte_end":45129,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45130,"byte_end":45133,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let answer = { *spin_mutex.lock() };","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45134,"byte_end":45174,"line_start":71,"line_end":71,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(answer, thread_count);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45175,"byte_end":45212,"line_start":72,"line_end":72,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45213,"byte_end":45220,"line_start":73,"line_end":73,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":253},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45503,"byte_end":45519,"line_start":84,"line_end":84,"column_start":12,"column_end":28},"name":"TicketMutexGuard","qualname":"::mutex::ticket::TicketMutexGuard","value":"TicketMutexGuard {  }","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":" A guard that protects some data.","sig":null,"attributes":[{"value":"/ A guard that protects some data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45385,"byte_end":45421,"line_start":81,"line_end":81,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45422,"byte_end":45425,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ When the guard is dropped, the next ticket will be processed.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45426,"byte_end":45491,"line_start":83,"line_end":83,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46191,"byte_end":46194,"line_start":110,"line_end":110,"column_start":18,"column_end":21},"name":"new","qualname":"<TicketMutex<T, R>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`TicketMutex`] wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new [`TicketMutex`] wrapping the supplied data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45782,"byte_end":45843,"line_start":94,"line_end":94,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45848,"byte_end":45851,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45856,"byte_end":45869,"line_start":96,"line_end":96,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45874,"byte_end":45877,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45882,"byte_end":45889,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use spin::mutex::TicketMutex;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45894,"byte_end":45927,"line_start":99,"line_end":99,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45932,"byte_end":45935,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ static MUTEX: TicketMutex<()> = TicketMutex::<_>::new(());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45940,"byte_end":46002,"line_start":101,"line_end":101,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46007,"byte_end":46010,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46015,"byte_end":46030,"line_start":103,"line_end":103,"column_start":5,"column_end":20}},{"value":"/     let lock = MUTEX.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46035,"byte_end":46067,"line_start":104,"line_end":104,"column_start":5,"column_end":37}},{"value":"/     // do something with lock","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46072,"byte_end":46105,"line_start":105,"line_end":105,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46110,"byte_end":46129,"line_start":106,"line_end":106,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46134,"byte_end":46139,"line_start":107,"line_end":107,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46144,"byte_end":46151,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46156,"byte_end":46173,"line_start":109,"line_end":109,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46678,"byte_end":46688,"line_start":128,"line_end":128,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<TicketMutex<T, R>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this [`TicketMutex`] and unwraps the underlying data.","sig":null,"attributes":[{"value":"/ Consumes this [`TicketMutex`] and unwraps the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46418,"byte_end":46484,"line_start":119,"line_end":119,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46489,"byte_end":46492,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46497,"byte_end":46510,"line_start":121,"line_end":121,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46515,"byte_end":46518,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46523,"byte_end":46530,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::TicketMutex::<_>::new(42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46535,"byte_end":46589,"line_start":124,"line_end":124,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(42, lock.into_inner());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46594,"byte_end":46632,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46637,"byte_end":46644,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46649,"byte_end":46666,"line_start":127,"line_end":127,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47402,"byte_end":47412,"line_start":153,"line_end":153,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<TicketMutex<T, R>>::as_mut_ptr","value":"pub fn as_mut_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the underying data.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the underying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46743,"byte_end":46795,"line_start":131,"line_end":131,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46800,"byte_end":46803,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ This is mostly meant to be used for applications which require manual unlocking, but where","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46808,"byte_end":46902,"line_start":133,"line_end":133,"column_start":5,"column_end":99}},{"value":"/ storing both the lock and the pointer to the inner data gets inefficient.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46907,"byte_end":46984,"line_start":134,"line_end":134,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46989,"byte_end":46992,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":46997,"byte_end":47010,"line_start":136,"line_end":136,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47015,"byte_end":47022,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47027,"byte_end":47079,"line_start":138,"line_end":138,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47084,"byte_end":47087,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47092,"byte_end":47104,"line_start":140,"line_end":140,"column_start":5,"column_end":17}},{"value":"/     core::mem::forget(lock.lock());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47109,"byte_end":47148,"line_start":141,"line_end":141,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47153,"byte_end":47156,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(lock.as_mut_ptr().read(), 42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47161,"byte_end":47210,"line_start":143,"line_end":143,"column_start":5,"column_end":54}},{"value":"/     lock.as_mut_ptr().write(58);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47215,"byte_end":47251,"line_start":144,"line_end":144,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47256,"byte_end":47259,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/     lock.force_unlock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47264,"byte_end":47292,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47297,"byte_end":47302,"line_start":147,"line_end":147,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47307,"byte_end":47310,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*lock.lock(), 58);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47315,"byte_end":47348,"line_start":149,"line_end":149,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47353,"byte_end":47356,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47361,"byte_end":47368,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47373,"byte_end":47390,"line_start":152,"line_end":152,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48484,"byte_end":48488,"line_start":185,"line_end":185,"column_start":12,"column_end":16},"name":"lock","qualname":"<TicketMutex<T, R>>::lock","value":"pub fn lock(&Self) -> TicketMutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks the [`TicketMutex`] and returns a guard that permits access to the inner data.","sig":null,"attributes":[{"value":"/ Locks the [`TicketMutex`] and returns a guard that permits access to the inner data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47909,"byte_end":47997,"line_start":170,"line_end":170,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48002,"byte_end":48005,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The returned data may be dereferenced for data access","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48010,"byte_end":48067,"line_start":172,"line_end":172,"column_start":5,"column_end":62}},{"value":"/ and the lock will be dropped when the guard falls out of scope.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48072,"byte_end":48139,"line_start":173,"line_end":173,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48144,"byte_end":48147,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48152,"byte_end":48159,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::TicketMutex::<_>::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48164,"byte_end":48217,"line_start":176,"line_end":176,"column_start":5,"column_end":58}},{"value":"/ {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48222,"byte_end":48227,"line_start":177,"line_end":177,"column_start":5,"column_end":10}},{"value":"/     let mut data = lock.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48232,"byte_end":48267,"line_start":178,"line_end":178,"column_start":5,"column_end":40}},{"value":"/     // The lock is now locked and the data can be accessed","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48272,"byte_end":48334,"line_start":179,"line_end":179,"column_start":5,"column_end":67}},{"value":"/     *data += 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48339,"byte_end":48358,"line_start":180,"line_end":180,"column_start":5,"column_end":24}},{"value":"/     // The lock is implicitly dropped at the end of the scope","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48363,"byte_end":48428,"line_start":181,"line_end":181,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48433,"byte_end":48438,"line_start":182,"line_end":182,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48443,"byte_end":48450,"line_start":183,"line_end":183,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":48455,"byte_end":48472,"line_start":184,"line_end":184,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49541,"byte_end":49550,"line_start":214,"line_end":214,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<TicketMutex<T, R>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the lock is currently held.","sig":null,"attributes":[{"value":"/ Returns `true` if the lock is currently held.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49191,"byte_end":49240,"line_start":207,"line_end":207,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49245,"byte_end":49248,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49253,"byte_end":49265,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49270,"byte_end":49273,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49278,"byte_end":49387,"line_start":211,"line_end":211,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49392,"byte_end":49507,"line_start":212,"line_end":212,"column_start":5,"column_end":120}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49512,"byte_end":49529,"line_start":213,"line_end":213,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50056,"byte_end":50068,"line_start":227,"line_end":227,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<TicketMutex<T, R>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock this [`TicketMutex`], by serving the next ticket.","sig":null,"attributes":[{"value":"/ Force unlock this [`TicketMutex`], by serving the next ticket.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49702,"byte_end":49768,"line_start":219,"line_end":219,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49773,"byte_end":49776,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49781,"byte_end":49793,"line_start":221,"line_end":221,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49798,"byte_end":49801,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the lock is not held by the current","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49806,"byte_end":49875,"line_start":223,"line_end":223,"column_start":5,"column_end":74}},{"value":"/ thread. However, this can be useful in some instances for exposing the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49880,"byte_end":49954,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/ lock to FFI that doesn't know how to deal with RAII.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49959,"byte_end":50015,"line_start":225,"line_end":225,"column_start":5,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50020,"byte_end":50037,"line_start":226,"line_end":226,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50623,"byte_end":50631,"line_start":246,"line_end":246,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<TicketMutex<T, R>>::try_lock","value":"pub fn try_lock(&Self) -> Option<TicketMutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to lock this [`TicketMutex`], returning a lock guard if successful.","sig":null,"attributes":[{"value":"/ Try to lock this [`TicketMutex`], returning a lock guard if successful.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50148,"byte_end":50223,"line_start":231,"line_end":231,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50228,"byte_end":50231,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50236,"byte_end":50249,"line_start":233,"line_end":233,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50254,"byte_end":50257,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50262,"byte_end":50269,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::TicketMutex::<_>::new(42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50274,"byte_end":50328,"line_start":236,"line_end":236,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50333,"byte_end":50336,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let maybe_guard = lock.try_lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50341,"byte_end":50379,"line_start":238,"line_end":238,"column_start":5,"column_end":43}},{"value":"/ assert!(maybe_guard.is_some());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50384,"byte_end":50419,"line_start":239,"line_end":239,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50424,"byte_end":50427,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ // `maybe_guard` is still held, so the second call fails","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50432,"byte_end":50492,"line_start":241,"line_end":241,"column_start":5,"column_end":65}},{"value":"/ let maybe_guard2 = lock.try_lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50497,"byte_end":50536,"line_start":242,"line_end":242,"column_start":5,"column_end":44}},{"value":"/ assert!(maybe_guard2.is_none());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50541,"byte_end":50577,"line_start":243,"line_end":243,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50582,"byte_end":50589,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":50594,"byte_end":50611,"line_start":245,"line_end":245,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52032,"byte_end":52039,"line_start":282,"line_end":282,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<TicketMutex<T, R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51467,"byte_end":51522,"line_start":268,"line_end":268,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51527,"byte_end":51530,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the [`TicketMutex`] mutably, and a mutable reference is guaranteed to be exclusive in","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51535,"byte_end":51648,"line_start":270,"line_end":270,"column_start":5,"column_end":118}},{"value":"/ Rust, no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist. As","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51653,"byte_end":51763,"line_start":271,"line_end":271,"column_start":5,"column_end":115}},{"value":"/ such, this is a 'zero-cost' operation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51768,"byte_end":51810,"line_start":272,"line_end":272,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51815,"byte_end":51818,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51823,"byte_end":51836,"line_start":274,"line_end":274,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51841,"byte_end":51844,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51849,"byte_end":51856,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ let mut lock = spin::mutex::TicketMutex::<_>::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51861,"byte_end":51918,"line_start":277,"line_end":277,"column_start":5,"column_end":62}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51923,"byte_end":51948,"line_start":278,"line_end":278,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*lock.lock(), 10);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51953,"byte_end":51986,"line_start":279,"line_end":279,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":51991,"byte_end":51998,"line_start":280,"line_end":280,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52003,"byte_end":52020,"line_start":281,"line_end":281,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52999,"byte_end":53003,"line_start":316,"line_end":316,"column_start":12,"column_end":16},"name":"leak","qualname":"<TicketMutexGuard>::leak","value":"pub fn leak(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52558,"byte_end":52635,"line_start":303,"line_end":303,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52640,"byte_end":52643,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original [`TicketMutex`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52648,"byte_end":52727,"line_start":305,"line_end":305,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52732,"byte_end":52735,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52740,"byte_end":52747,"line_start":307,"line_end":307,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::mutex::TicketMutex::<_>::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52752,"byte_end":52807,"line_start":308,"line_end":308,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52812,"byte_end":52815,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::mutex::TicketMutexGuard::leak(mylock.lock());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52820,"byte_end":52896,"line_start":310,"line_end":310,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52901,"byte_end":52904,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52909,"byte_end":52923,"line_start":312,"line_end":312,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52928,"byte_end":52953,"line_start":313,"line_end":313,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52958,"byte_end":52965,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52970,"byte_end":52987,"line_start":315,"line_end":315,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22316,"byte_end":22321,"line_start":99,"line_end":99,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":365}],"decl_id":null,"docs":" A spin-based lock providing mutually exclusive access to data.","sig":null,"attributes":[{"value":"/ A spin-based lock providing mutually exclusive access to data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21063,"byte_end":21129,"line_start":49,"line_end":49,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21130,"byte_end":21133,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The implementation uses either a ticket mutex or a regular spin mutex depending on whether the `spin_mutex` or","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21134,"byte_end":21248,"line_start":51,"line_end":51,"column_start":1,"column_end":115}},{"value":"/ `ticket_mutex` feature flag is enabled.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21249,"byte_end":21292,"line_start":52,"line_end":52,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21293,"byte_end":21296,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21297,"byte_end":21310,"line_start":54,"line_end":54,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21311,"byte_end":21314,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21315,"byte_end":21322,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21323,"byte_end":21336,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21337,"byte_end":21340,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::Mutex::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21341,"byte_end":21376,"line_start":59,"line_end":59,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21377,"byte_end":21380,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ // Modify the data","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21381,"byte_end":21403,"line_start":61,"line_end":61,"column_start":1,"column_end":23}},{"value":"/ *lock.lock() = 2;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21404,"byte_end":21425,"line_start":62,"line_end":62,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21426,"byte_end":21429,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Read the data","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21430,"byte_end":21450,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"/ let answer = *lock.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21451,"byte_end":21481,"line_start":65,"line_end":65,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(answer, 2);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21482,"byte_end":21508,"line_start":66,"line_end":66,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21509,"byte_end":21516,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21517,"byte_end":21520,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ # Thread safety example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21521,"byte_end":21548,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21549,"byte_end":21552,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21553,"byte_end":21560,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21561,"byte_end":21574,"line_start":72,"line_end":72,"column_start":1,"column_end":14}},{"value":"/ use std::sync::{Arc, Barrier};","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21575,"byte_end":21609,"line_start":73,"line_end":73,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21610,"byte_end":21613,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ let thread_count = 1000;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21614,"byte_end":21642,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/ let spin_mutex = Arc::new(spin::Mutex::new(0));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21643,"byte_end":21694,"line_start":76,"line_end":76,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21695,"byte_end":21698,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // We use a barrier to ensure the readout happens after all writing","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21699,"byte_end":21770,"line_start":78,"line_end":78,"column_start":1,"column_end":72}},{"value":"/ let barrier = Arc::new(Barrier::new(thread_count + 1));","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21771,"byte_end":21830,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21831,"byte_end":21834,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ for _ in (0..thread_count) {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21835,"byte_end":21867,"line_start":81,"line_end":81,"column_start":1,"column_end":33}},{"value":"/     let my_barrier = barrier.clone();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21868,"byte_end":21909,"line_start":82,"line_end":82,"column_start":1,"column_end":42}},{"value":"/     let my_lock = spin_mutex.clone();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21910,"byte_end":21951,"line_start":83,"line_end":83,"column_start":1,"column_end":42}},{"value":"/     std::thread::spawn(move || {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21952,"byte_end":21988,"line_start":84,"line_end":84,"column_start":1,"column_end":37}},{"value":"/         let mut guard = my_lock.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":21989,"byte_end":22032,"line_start":85,"line_end":85,"column_start":1,"column_end":44}},{"value":"/         *guard += 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22033,"byte_end":22057,"line_start":86,"line_end":86,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22058,"byte_end":22061,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/         // Release the lock to prevent a deadlock","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22062,"byte_end":22115,"line_start":88,"line_end":88,"column_start":1,"column_end":54}},{"value":"/         drop(guard);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22116,"byte_end":22140,"line_start":89,"line_end":89,"column_start":1,"column_end":25}},{"value":"/         my_barrier.wait();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22141,"byte_end":22171,"line_start":90,"line_end":90,"column_start":1,"column_end":31}},{"value":"/     });","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22172,"byte_end":22183,"line_start":91,"line_end":91,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22184,"byte_end":22189,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22190,"byte_end":22193,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ barrier.wait();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22194,"byte_end":22213,"line_start":94,"line_end":94,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22214,"byte_end":22217,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ let answer = { *spin_mutex.lock() };","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22218,"byte_end":22258,"line_start":96,"line_end":96,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(answer, thread_count);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22259,"byte_end":22296,"line_start":97,"line_end":97,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22297,"byte_end":22304,"line_start":98,"line_end":98,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":372},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22800,"byte_end":22810,"line_start":113,"line_end":113,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":375}],"decl_id":null,"docs":" A generic guard that will protect some data access and\n uses either a ticket lock or a normal spin mutex.","sig":null,"attributes":[{"value":"/ A generic guard that will protect some data access and","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22492,"byte_end":22550,"line_start":106,"line_end":106,"column_start":1,"column_end":59}},{"value":"/ uses either a ticket lock or a normal spin mutex.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22551,"byte_end":22604,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22605,"byte_end":22608,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ For more info see [`TicketMutexGuard`] or [`SpinMutexGuard`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22609,"byte_end":22674,"line_start":109,"line_end":109,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22675,"byte_end":22678,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`TicketMutexGuard`]: ./struct.TicketMutexGuard.html","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22679,"byte_end":22735,"line_start":111,"line_end":111,"column_start":1,"column_end":57}},{"value":"/ [`SpinMutexGuard`]: ./struct.SpinMutexGuard.html","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22736,"byte_end":22788,"line_start":112,"line_end":112,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23273,"byte_end":23276,"line_start":134,"line_end":134,"column_start":18,"column_end":21},"name":"new","qualname":"<Mutex<T, R>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Mutex`] wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new [`Mutex`] wrapping the supplied data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22900,"byte_end":22955,"line_start":118,"line_end":118,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22960,"byte_end":22963,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22968,"byte_end":22981,"line_start":120,"line_end":120,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22986,"byte_end":22989,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22994,"byte_end":23001,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use spin::Mutex;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23006,"byte_end":23026,"line_start":123,"line_end":123,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23031,"byte_end":23034,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ static MUTEX: Mutex<()> = Mutex::new(());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23039,"byte_end":23084,"line_start":125,"line_end":125,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23089,"byte_end":23092,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23097,"byte_end":23112,"line_start":127,"line_end":127,"column_start":5,"column_end":20}},{"value":"/     let lock = MUTEX.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23117,"byte_end":23149,"line_start":128,"line_end":128,"column_start":5,"column_end":37}},{"value":"/     // do something with lock","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23154,"byte_end":23187,"line_start":129,"line_end":129,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23192,"byte_end":23211,"line_start":130,"line_end":130,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23216,"byte_end":23221,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23226,"byte_end":23233,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23238,"byte_end":23255,"line_start":133,"line_end":133,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23591,"byte_end":23601,"line_start":147,"line_end":147,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<T, R>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this [`Mutex`] and unwraps the underlying data.","sig":null,"attributes":[{"value":"/ Consumes this [`Mutex`] and unwraps the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23355,"byte_end":23415,"line_start":138,"line_end":138,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23420,"byte_end":23423,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23428,"byte_end":23441,"line_start":140,"line_end":140,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23446,"byte_end":23449,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23454,"byte_end":23461,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::Mutex::new(42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23466,"byte_end":23502,"line_start":143,"line_end":143,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(42, lock.into_inner());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23507,"byte_end":23545,"line_start":144,"line_end":144,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23550,"byte_end":23557,"line_start":145,"line_end":145,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23562,"byte_end":23579,"line_start":146,"line_end":146,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24260,"byte_end":24264,"line_start":168,"line_end":168,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<T, R>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks the [`Mutex`] and returns a guard that permits access to the inner data.","sig":null,"attributes":[{"value":"/ Locks the [`Mutex`] and returns a guard that permits access to the inner data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23708,"byte_end":23790,"line_start":153,"line_end":153,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23795,"byte_end":23798,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ The returned value may be dereferenced for data access","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23803,"byte_end":23861,"line_start":155,"line_end":155,"column_start":5,"column_end":63}},{"value":"/ and the lock will be dropped when the guard falls out of scope.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23866,"byte_end":23933,"line_start":156,"line_end":156,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23938,"byte_end":23941,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23946,"byte_end":23953,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::Mutex::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23958,"byte_end":23993,"line_start":159,"line_end":159,"column_start":5,"column_end":40}},{"value":"/ {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23998,"byte_end":24003,"line_start":160,"line_end":160,"column_start":5,"column_end":10}},{"value":"/     let mut data = lock.lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24008,"byte_end":24043,"line_start":161,"line_end":161,"column_start":5,"column_end":40}},{"value":"/     // The lock is now locked and the data can be accessed","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24048,"byte_end":24110,"line_start":162,"line_end":162,"column_start":5,"column_end":67}},{"value":"/     *data += 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24115,"byte_end":24134,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/     // The lock is implicitly dropped at the end of the scope","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24139,"byte_end":24204,"line_start":164,"line_end":164,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24209,"byte_end":24214,"line_start":165,"line_end":165,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24219,"byte_end":24226,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24231,"byte_end":24248,"line_start":167,"line_end":167,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24756,"byte_end":24765,"line_start":183,"line_end":183,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<Mutex<T, R>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the lock is currently held.","sig":null,"attributes":[{"value":"/ Returns `true` if the lock is currently held.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24406,"byte_end":24455,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24460,"byte_end":24463,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24468,"byte_end":24480,"line_start":178,"line_end":178,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24485,"byte_end":24488,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24493,"byte_end":24602,"line_start":180,"line_end":180,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24607,"byte_end":24722,"line_start":181,"line_end":181,"column_start":5,"column_end":120}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24727,"byte_end":24744,"line_start":182,"line_end":182,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25145,"byte_end":25157,"line_start":195,"line_end":195,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<T, R>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock this [`Mutex`].","sig":null,"attributes":[{"value":"/ Force unlock this [`Mutex`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24825,"byte_end":24857,"line_start":187,"line_end":187,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24862,"byte_end":24865,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24870,"byte_end":24882,"line_start":189,"line_end":189,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24887,"byte_end":24890,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the lock is not held by the current","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24895,"byte_end":24964,"line_start":191,"line_end":191,"column_start":5,"column_end":74}},{"value":"/ thread. However, this can be useful in some instances for exposing the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24969,"byte_end":25043,"line_start":192,"line_end":192,"column_start":5,"column_end":79}},{"value":"/ lock to FFI that doesn't know how to deal with RAII.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25048,"byte_end":25104,"line_start":193,"line_end":193,"column_start":5,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25109,"byte_end":25126,"line_start":194,"line_end":194,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25663,"byte_end":25671,"line_start":214,"line_end":214,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<T, R>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to lock this [`Mutex`], returning a lock guard if successful.","sig":null,"attributes":[{"value":"/ Try to lock this [`Mutex`], returning a lock guard if successful.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25212,"byte_end":25281,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25286,"byte_end":25289,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25294,"byte_end":25307,"line_start":201,"line_end":201,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25312,"byte_end":25315,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25320,"byte_end":25327,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::Mutex::new(42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25332,"byte_end":25368,"line_start":204,"line_end":204,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25373,"byte_end":25376,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ let maybe_guard = lock.try_lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25381,"byte_end":25419,"line_start":206,"line_end":206,"column_start":5,"column_end":43}},{"value":"/ assert!(maybe_guard.is_some());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25424,"byte_end":25459,"line_start":207,"line_end":207,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25464,"byte_end":25467,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ // `maybe_guard` is still held, so the second call fails","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25472,"byte_end":25532,"line_start":209,"line_end":209,"column_start":5,"column_end":65}},{"value":"/ let maybe_guard2 = lock.try_lock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25537,"byte_end":25576,"line_start":210,"line_end":210,"column_start":5,"column_end":44}},{"value":"/ assert!(maybe_guard2.is_none());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25581,"byte_end":25617,"line_start":211,"line_end":211,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25622,"byte_end":25629,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25634,"byte_end":25651,"line_start":213,"line_end":213,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26355,"byte_end":26362,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<T, R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25814,"byte_end":25869,"line_start":220,"line_end":220,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25874,"byte_end":25877,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the [`Mutex`] mutably, and a mutable reference is guaranteed to be exclusive in Rust,","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":25882,"byte_end":25995,"line_start":222,"line_end":222,"column_start":5,"column_end":118}},{"value":"/ no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist. As such,","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26000,"byte_end":26110,"line_start":223,"line_end":223,"column_start":5,"column_end":115}},{"value":"/ this is a 'zero-cost' operation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26115,"byte_end":26151,"line_start":224,"line_end":224,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26156,"byte_end":26159,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26164,"byte_end":26177,"line_start":226,"line_end":226,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26182,"byte_end":26185,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26190,"byte_end":26197,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"/ let mut lock = spin::Mutex::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26202,"byte_end":26241,"line_start":229,"line_end":229,"column_start":5,"column_end":44}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26246,"byte_end":26271,"line_start":230,"line_end":230,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*lock.lock(), 10);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26276,"byte_end":26309,"line_start":231,"line_end":231,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26314,"byte_end":26321,"line_start":232,"line_end":232,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26326,"byte_end":26343,"line_start":233,"line_end":233,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27271,"byte_end":27275,"line_start":271,"line_end":271,"column_start":12,"column_end":16},"name":"leak","qualname":"<MutexGuard>::leak","value":"pub fn leak(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26867,"byte_end":26944,"line_start":258,"line_end":258,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26949,"byte_end":26952,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original [`Mutex`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26957,"byte_end":27030,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27035,"byte_end":27038,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27043,"byte_end":27050,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::Mutex::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27055,"byte_end":27092,"line_start":263,"line_end":263,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27097,"byte_end":27100,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::MutexGuard::leak(mylock.lock());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27105,"byte_end":27168,"line_start":265,"line_end":265,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27173,"byte_end":27176,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27181,"byte_end":27195,"line_start":267,"line_end":267,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27200,"byte_end":27225,"line_start":268,"line_end":268,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27230,"byte_end":27237,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27242,"byte_end":27259,"line_start":270,"line_end":270,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":434},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"once","qualname":"::once","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":468},{"krate":0,"index":472},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":507},{"krate":0,"index":519},{"krate":0,"index":534},{"krate":0,"index":538},{"krate":0,"index":542},{"krate":0,"index":545}],"decl_id":null,"docs":" Synchronization primitives for one-time evaluation.\n","sig":null,"attributes":[{"value":"cfg(feature = \"once\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2778,"byte_end":2802,"line_start":80,"line_end":80,"column_start":1,"column_end":25}},{"value":"/ Synchronization primitives for one-time evaluation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":58776,"byte_end":58831,"line_start":1,"line_end":1,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":462},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59548,"byte_end":59552,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467}],"decl_id":null,"docs":" A primitive that provides lazy one-time initialization.","sig":null,"attributes":[{"value":"/ A primitive that provides lazy one-time initialization.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59002,"byte_end":59061,"line_start":15,"line_end":15,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59062,"byte_end":59065,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Unlike its `std::sync` equivalent, this is generalized such that the closure returns a","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59066,"byte_end":59156,"line_start":17,"line_end":17,"column_start":1,"column_end":91}},{"value":"/ value to be stored by the [`Once`] (`std::sync::Once` can be trivially emulated with","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59157,"byte_end":59245,"line_start":18,"line_end":18,"column_start":1,"column_end":89}},{"value":"/ `Once`).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59246,"byte_end":59258,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59259,"byte_end":59262,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Because [`Once::new`] is `const`, this primitive may be used to safely initialize statics.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59263,"byte_end":59357,"line_start":21,"line_end":21,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59358,"byte_end":59361,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59362,"byte_end":59376,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59377,"byte_end":59380,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59381,"byte_end":59388,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59389,"byte_end":59402,"line_start":26,"line_end":26,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59403,"byte_end":59406,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ static START: spin::Once = spin::Once::new();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59407,"byte_end":59456,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59457,"byte_end":59460,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ START.call_once(|| {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59461,"byte_end":59485,"line_start":30,"line_end":30,"column_start":1,"column_end":25}},{"value":"/     // run initialization here","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59486,"byte_end":59520,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/ });","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59521,"byte_end":59528,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59529,"byte_end":59536,"line_start":33,"line_end":33,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64388,"byte_end":64397,"line_start":166,"line_end":166,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once<T, R>>::call_once","value":"pub fn call_once<F: FnOnce() -> T>(&Self, F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"/ Performs an initialization routine once and only once. The given closure","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63223,"byte_end":63299,"line_start":132,"line_end":132,"column_start":5,"column_end":81}},{"value":"/ will be executed if this is the first time `call_once` has been called,","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63304,"byte_end":63379,"line_start":133,"line_end":133,"column_start":5,"column_end":80}},{"value":"/ and otherwise the routine will *not* be invoked.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63384,"byte_end":63436,"line_start":134,"line_end":134,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63441,"byte_end":63444,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63449,"byte_end":63520,"line_start":136,"line_end":136,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63525,"byte_end":63558,"line_start":137,"line_end":137,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63563,"byte_end":63566,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ When this function returns, it is guaranteed that some initialization","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63571,"byte_end":63644,"line_start":139,"line_end":139,"column_start":5,"column_end":78}},{"value":"/ has run and completed (it may not be the closure specified). The","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63649,"byte_end":63717,"line_start":140,"line_end":140,"column_start":5,"column_end":73}},{"value":"/ returned pointer will point to the result from the closure that was","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63722,"byte_end":63793,"line_start":141,"line_end":141,"column_start":5,"column_end":76}},{"value":"/ run.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63798,"byte_end":63806,"line_start":142,"line_end":142,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63811,"byte_end":63814,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63819,"byte_end":63831,"line_start":144,"line_end":144,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63836,"byte_end":63839,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63844,"byte_end":63925,"line_start":146,"line_end":146,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63930,"byte_end":64008,"line_start":147,"line_end":147,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64013,"byte_end":64028,"line_start":148,"line_end":148,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64033,"byte_end":64036,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64041,"byte_end":64055,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64060,"byte_end":64063,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64068,"byte_end":64075,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64080,"byte_end":64093,"line_start":153,"line_end":153,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64098,"byte_end":64101,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ static INIT: spin::Once<usize> = spin::Once::new();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64106,"byte_end":64161,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64166,"byte_end":64169,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ fn get_cached_val() -> usize {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64174,"byte_end":64208,"line_start":157,"line_end":157,"column_start":5,"column_end":39}},{"value":"/     *INIT.call_once(expensive_computation)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64213,"byte_end":64259,"line_start":158,"line_end":158,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64264,"byte_end":64269,"line_start":159,"line_end":159,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64274,"byte_end":64277,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ fn expensive_computation() -> usize {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64282,"byte_end":64323,"line_start":161,"line_end":161,"column_start":5,"column_end":46}},{"value":"/     // ...","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64328,"byte_end":64342,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/ # 2","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64347,"byte_end":64354,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64359,"byte_end":64364,"line_start":164,"line_end":164,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64369,"byte_end":64376,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65783,"byte_end":65796,"line_start":206,"line_end":206,"column_start":12,"column_end":25},"name":"try_call_once","qualname":"<Once<T, R>>::try_call_once","value":"pub fn try_call_once<F: FnOnce() -> Result<T, E>, E>(&Self, F)\n-> Result<&T, E>","parent":null,"children":[],"decl_id":null,"docs":" This method is similar to `call_once`, but allows the given closure to\n fail, and lets the `Once` in a uninitialized state if it does.","sig":null,"attributes":[{"value":"/ This method is similar to `call_once`, but allows the given closure to","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64601,"byte_end":64675,"line_start":173,"line_end":173,"column_start":5,"column_end":79}},{"value":"/ fail, and lets the `Once` in a uninitialized state if it does.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64680,"byte_end":64746,"line_start":174,"line_end":174,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64751,"byte_end":64754,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64759,"byte_end":64830,"line_start":176,"line_end":176,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64835,"byte_end":64868,"line_start":177,"line_end":177,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64873,"byte_end":64876,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ When this function returns without error, it is guaranteed that some","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64881,"byte_end":64953,"line_start":179,"line_end":179,"column_start":5,"column_end":77}},{"value":"/ initialization has run and completed (it may not be the closure","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":64958,"byte_end":65025,"line_start":180,"line_end":180,"column_start":5,"column_end":72}},{"value":"/ specified). The returned reference will point to the result from the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65030,"byte_end":65102,"line_start":181,"line_end":181,"column_start":5,"column_end":77}},{"value":"/ closure that was run.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65107,"byte_end":65132,"line_start":182,"line_end":182,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65137,"byte_end":65140,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65145,"byte_end":65157,"line_start":184,"line_end":184,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65162,"byte_end":65165,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65170,"byte_end":65251,"line_start":186,"line_end":186,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65256,"byte_end":65334,"line_start":187,"line_end":187,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65339,"byte_end":65354,"line_start":188,"line_end":188,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65359,"byte_end":65362,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65367,"byte_end":65381,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65386,"byte_end":65389,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65394,"byte_end":65401,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65406,"byte_end":65419,"line_start":193,"line_end":193,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65424,"byte_end":65427,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ static INIT: spin::Once<usize> = spin::Once::new();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65432,"byte_end":65487,"line_start":195,"line_end":195,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65492,"byte_end":65495,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ fn get_cached_val() -> Result<usize, String> {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65500,"byte_end":65550,"line_start":197,"line_end":197,"column_start":5,"column_end":55}},{"value":"/     INIT.try_call_once(expensive_fallible_computation).map(|x| *x)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65555,"byte_end":65625,"line_start":198,"line_end":198,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65630,"byte_end":65635,"line_start":199,"line_end":199,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65640,"byte_end":65643,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ fn expensive_fallible_computation() -> Result<usize, String> {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65648,"byte_end":65714,"line_start":201,"line_end":201,"column_start":5,"column_end":71}},{"value":"/     // ...","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65719,"byte_end":65733,"line_start":202,"line_end":202,"column_start":5,"column_end":19}},{"value":"/ # Ok(2)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65738,"byte_end":65749,"line_start":203,"line_end":203,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65754,"byte_end":65759,"line_start":204,"line_end":204,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":65764,"byte_end":65771,"line_start":205,"line_end":205,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72595,"byte_end":72599,"line_start":323,"line_end":323,"column_start":12,"column_end":16},"name":"wait","qualname":"<Once<T, R>>::wait","value":"pub fn wait(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Spins until the [`Once`] contains a value.","sig":null,"attributes":[{"value":"/ Spins until the [`Once`] contains a value.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72210,"byte_end":72256,"line_start":314,"line_end":314,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72261,"byte_end":72264,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Note that in releases prior to `0.7`, this function had the behaviour of [`Once::poll`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72269,"byte_end":72361,"line_start":316,"line_end":316,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72366,"byte_end":72369,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72374,"byte_end":72386,"line_start":318,"line_end":318,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72391,"byte_end":72394,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72399,"byte_end":72480,"line_start":320,"line_end":320,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72485,"byte_end":72563,"line_start":321,"line_end":321,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72568,"byte_end":72583,"line_start":322,"line_end":322,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":73253,"byte_end":73257,"line_start":342,"line_end":342,"column_start":12,"column_end":16},"name":"poll","qualname":"<Once<T, R>>::poll","value":"pub fn poll(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Like [`Once::get`], but will spin if the [`Once`] is in the process of being\n initialized. If initialization has not even begun, `None` will be returned.","sig":null,"attributes":[{"value":"/ Like [`Once::get`], but will spin if the [`Once`] is in the process of being","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72769,"byte_end":72849,"line_start":332,"line_end":332,"column_start":5,"column_end":85}},{"value":"/ initialized. If initialization has not even begun, `None` will be returned.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72854,"byte_end":72933,"line_start":333,"line_end":333,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72938,"byte_end":72941,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ Note that in releases prior to `0.7`, this function was named `wait`.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":72946,"byte_end":73019,"line_start":335,"line_end":335,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":73024,"byte_end":73027,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":73032,"byte_end":73044,"line_start":337,"line_end":337,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":73049,"byte_end":73052,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":73057,"byte_end":73138,"line_start":339,"line_end":339,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":73143,"byte_end":73221,"line_start":340,"line_end":340,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":73226,"byte_end":73241,"line_start":341,"line_end":341,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":522},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74065,"byte_end":74069,"line_start":360,"line_end":360,"column_start":15,"column_end":19},"name":"INIT","qualname":"::once::Once::<T, R>::INIT","value":"Self","parent":{"krate":0,"index":519},"children":[],"decl_id":null,"docs":" Initialization constant of [`Once`].\n","sig":null,"attributes":[{"value":"/ Initialization constant of [`Once`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":73957,"byte_end":73997,"line_start":358,"line_end":358,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74002,"byte_end":74050,"line_start":359,"line_end":359,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74281,"byte_end":74284,"line_start":367,"line_end":367,"column_start":18,"column_end":21},"name":"new","qualname":"<Once<T, R>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Once`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`Once`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74236,"byte_end":74263,"line_start":366,"line_end":366,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74383,"byte_end":74394,"line_start":372,"line_end":372,"column_start":18,"column_end":29},"name":"initialized","qualname":"<Once<T, R>>::initialized","value":"pub const fn initialized(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initialized [`Once`].\n","sig":null,"attributes":[{"value":"/ Creates a new initialized [`Once`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74326,"byte_end":74365,"line_start":371,"line_end":371,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74876,"byte_end":74886,"line_start":385,"line_end":385,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<Once<T, R>>::as_mut_ptr","value":"pub fn as_mut_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a pointer to the inner data.","sig":null,"attributes":[{"value":"/ Retrieve a pointer to the inner data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74600,"byte_end":74641,"line_start":380,"line_end":380,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74646,"byte_end":74649,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ While this method itself is safe, accessing the pointer before the [`Once`] has been","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74654,"byte_end":74742,"line_start":382,"line_end":382,"column_start":5,"column_end":93}},{"value":"/ initialized is UB, unless this method has already been written to from a pointer coming","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74747,"byte_end":74838,"line_start":383,"line_end":383,"column_start":5,"column_end":96}},{"value":"/ from this method.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":74843,"byte_end":74864,"line_start":384,"line_end":384,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":76110,"byte_end":76113,"line_start":416,"line_end":416,"column_start":12,"column_end":15},"name":"get","qualname":"<Once<T, R>>::get","value":"pub fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the inner value if the [`Once`] has been initialized.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the inner value if the [`Once`] has been initialized.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":76018,"byte_end":76098,"line_start":415,"line_end":415,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":77103,"byte_end":77116,"line_start":433,"line_end":433,"column_start":19,"column_end":32},"name":"get_unchecked","qualname":"<Once<T, R>>::get_unchecked","value":"pub unsafe fn get_unchecked(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the inner value on the unchecked assumption that the  [`Once`] has been initialized.","sig":null,"attributes":[{"value":"/ Returns a reference to the inner value on the unchecked assumption that the  [`Once`] has been initialized.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":76495,"byte_end":76606,"line_start":425,"line_end":425,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":76611,"byte_end":76614,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":76619,"byte_end":76631,"line_start":427,"line_end":427,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":76636,"byte_end":76639,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the `Once` has not already been initialized because a reference to uninitialized","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":76644,"byte_end":76758,"line_start":429,"line_end":429,"column_start":5,"column_end":119}},{"value":"/ memory will be returned, immediately triggering undefined behaviour (even if the reference goes unused).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":76763,"byte_end":76871,"line_start":430,"line_end":430,"column_start":5,"column_end":113}},{"value":"/ However, this can be useful in some instances for exposing the `Once` to FFI or when the overhead of atomically","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":76876,"byte_end":76991,"line_start":431,"line_end":431,"column_start":5,"column_end":120}},{"value":"/ checking initialization is unacceptable and the `Once` has already been initialized.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":76996,"byte_end":77084,"line_start":432,"line_end":432,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":77742,"byte_end":77749,"line_start":446,"line_end":446,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Once<T, R>>::get_mut","value":"pub fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the inner value if the [`Once`] has been initialized.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the inner value if the [`Once`] has been initialized.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":77457,"byte_end":77545,"line_start":442,"line_end":442,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":77550,"byte_end":77553,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ Because this method requires a mutable reference to the [`Once`], no synchronization","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":77558,"byte_end":77646,"line_start":444,"line_end":444,"column_start":5,"column_end":93}},{"value":"/ overhead is required to access the inner value. In effect, it is zero-cost.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":77651,"byte_end":77730,"line_start":445,"line_end":445,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78189,"byte_end":78203,"line_start":457,"line_end":457,"column_start":12,"column_end":26},"name":"try_into_inner","qualname":"<Once<T, R>>::try_into_inner","value":"pub fn try_into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a the inner value if the [`Once`] has been initialized.","sig":null,"attributes":[{"value":"/ Returns a the inner value if the [`Once`] has been initialized.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":77935,"byte_end":78002,"line_start":453,"line_end":453,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78007,"byte_end":78010,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ Because this method requires ownership of the [`Once`], no synchronization overhead","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78015,"byte_end":78102,"line_start":455,"line_end":455,"column_start":5,"column_end":92}},{"value":"/ is required to access the inner value. In effect, it is zero-cost.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78107,"byte_end":78177,"line_start":456,"line_end":456,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78679,"byte_end":78691,"line_start":469,"line_end":469,"column_start":12,"column_end":24},"name":"is_completed","qualname":"<Once<T, R>>::is_completed","value":"pub fn is_completed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the value has been initialized.","sig":null,"attributes":[{"value":"/ Checks whether the value has been initialized.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78386,"byte_end":78436,"line_start":464,"line_end":464,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78441,"byte_end":78444,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ This is done using [`Acquire`](core::sync::atomic::Ordering::Acquire) ordering, and","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78449,"byte_end":78536,"line_start":466,"line_end":466,"column_start":5,"column_end":92}},{"value":"/ therefore it is safe to access the value directly via","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78541,"byte_end":78598,"line_start":467,"line_end":467,"column_start":5,"column_end":62}},{"value":"/ [`get_unchecked`](Self::get_unchecked) if this returns true.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78603,"byte_end":78667,"line_start":468,"line_end":468,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":548},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rwlock","qualname":"::rwlock","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":563},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":597},{"krate":0,"index":604},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":623},{"krate":0,"index":629},{"krate":0,"index":643},{"krate":0,"index":649},{"krate":0,"index":653},{"krate":0,"index":657},{"krate":0,"index":661},{"krate":0,"index":665},{"krate":0,"index":669},{"krate":0,"index":674},{"krate":0,"index":682},{"krate":0,"index":687},{"krate":0,"index":692},{"krate":0,"index":699},{"krate":0,"index":704},{"krate":0,"index":709},{"krate":0,"index":714},{"krate":0,"index":720},{"krate":0,"index":726},{"krate":0,"index":731},{"krate":0,"index":735},{"krate":0,"index":740},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":759},{"krate":0,"index":768}],"decl_id":null,"docs":" A lock that provides data access to either one writer or many readers.\n","sig":null,"attributes":[{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2865,"byte_end":2891,"line_start":83,"line_end":83,"column_start":1,"column_end":27}},{"value":"/ A lock that provides data access to either one writer or many readers.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":84840,"byte_end":84914,"line_start":1,"line_end":1,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":583},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87540,"byte_end":87546,"line_start":69,"line_end":69,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588}],"decl_id":null,"docs":" A lock that provides data access to either one writer or many readers.","sig":null,"attributes":[{"value":"/ A lock that provides data access to either one writer or many readers.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85103,"byte_end":85177,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85178,"byte_end":85181,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This lock behaves in a similar manner to its namesake `std::sync::RwLock` but uses","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85182,"byte_end":85268,"line_start":18,"line_end":18,"column_start":1,"column_end":87}},{"value":"/ spinning for synchronisation instead. Unlike its namespace, this lock does not","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85269,"byte_end":85351,"line_start":19,"line_end":19,"column_start":1,"column_end":83}},{"value":"/ track lock poisoning.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85352,"byte_end":85377,"line_start":20,"line_end":20,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85378,"byte_end":85381,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85382,"byte_end":85459,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85460,"byte_end":85539,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85540,"byte_end":85619,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85620,"byte_end":85678,"line_start":25,"line_end":25,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85679,"byte_end":85682,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85683,"byte_end":85760,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across tasks and `Sync` to","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85761,"byte_end":85839,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85840,"byte_end":85918,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85919,"byte_end":85997,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":85998,"byte_end":86047,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86048,"byte_end":86051,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ An [`RwLockUpgradableGuard`](RwLockUpgradableGuard) can be upgraded to a","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86052,"byte_end":86128,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ writable guard through the [`RwLockUpgradableGuard::upgrade`](RwLockUpgradableGuard::upgrade)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86129,"byte_end":86226,"line_start":34,"line_end":34,"column_start":1,"column_end":98}},{"value":"/ [`RwLockUpgradableGuard::try_upgrade`](RwLockUpgradableGuard::try_upgrade) functions.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86227,"byte_end":86316,"line_start":35,"line_end":35,"column_start":1,"column_end":90}},{"value":"/ Writable or upgradeable guards can be downgraded through their respective `downgrade`","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86317,"byte_end":86406,"line_start":36,"line_end":36,"column_start":1,"column_end":90}},{"value":"/ functions.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86407,"byte_end":86421,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86422,"byte_end":86425,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Based on Facebook's","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86426,"byte_end":86449,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/ [`folly/RWSpinLock.h`](https://github.com/facebook/folly/blob/a0394d84f2d5c3e50ebfd0566f9d3acb52cfab5a/folly/synchronization/RWSpinLock.h).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86450,"byte_end":86593,"line_start":40,"line_end":40,"column_start":1,"column_end":144}},{"value":"/ This implementation is unfair to writers - if the lock always has readers, then no writers will","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86594,"byte_end":86693,"line_start":41,"line_end":41,"column_start":1,"column_end":100}},{"value":"/ ever get a chance. Using an upgradeable lock guard can *somewhat* alleviate this issue as no","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86694,"byte_end":86790,"line_start":42,"line_end":42,"column_start":1,"column_end":97}},{"value":"/ new readers are allowed when an upgradeable guard is held, but upgradeable guards can be taken","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86791,"byte_end":86889,"line_start":43,"line_end":43,"column_start":1,"column_end":99}},{"value":"/ when there are existing readers. However if the lock is that highly contended and writes are","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86890,"byte_end":86986,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/ crucial then this implementation may be a poor choice.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":86987,"byte_end":87045,"line_start":45,"line_end":45,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87046,"byte_end":87049,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87050,"byte_end":87064,"line_start":47,"line_end":47,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87065,"byte_end":87068,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87069,"byte_end":87076,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87077,"byte_end":87090,"line_start":50,"line_end":50,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87091,"byte_end":87094,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::RwLock::new(5);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87095,"byte_end":87131,"line_start":52,"line_end":52,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87132,"byte_end":87135,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87136,"byte_end":87180,"line_start":54,"line_end":54,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87181,"byte_end":87186,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87187,"byte_end":87216,"line_start":56,"line_end":56,"column_start":1,"column_end":30}},{"value":"/     let r2 = lock.read();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87217,"byte_end":87246,"line_start":57,"line_end":57,"column_start":1,"column_end":30}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87247,"byte_end":87274,"line_start":58,"line_end":58,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87275,"byte_end":87302,"line_start":59,"line_end":59,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87303,"byte_end":87348,"line_start":60,"line_end":60,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87349,"byte_end":87352,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87353,"byte_end":87400,"line_start":62,"line_end":62,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87401,"byte_end":87406,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87407,"byte_end":87440,"line_start":64,"line_end":64,"column_start":1,"column_end":34}},{"value":"/     *w += 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87441,"byte_end":87457,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87458,"byte_end":87484,"line_start":66,"line_end":66,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87485,"byte_end":87520,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87521,"byte_end":87528,"line_start":68,"line_end":68,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":592},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87910,"byte_end":87925,"line_start":83,"line_end":83,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596}],"decl_id":null,"docs":" A guard that provides immutable data access.","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87738,"byte_end":87786,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87787,"byte_end":87790,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will decrement the read count,","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87791,"byte_end":87862,"line_start":81,"line_end":81,"column_start":1,"column_end":72}},{"value":"/ potentially releasing the lock.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87863,"byte_end":87898,"line_start":82,"line_end":82,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":597},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88121,"byte_end":88137,"line_start":91,"line_end":91,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603}],"decl_id":null,"docs":" A guard that provides mutable data access.","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":87995,"byte_end":88041,"line_start":88,"line_end":88,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88042,"byte_end":88045,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88046,"byte_end":88109,"line_start":90,"line_end":90,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":604},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88640,"byte_end":88661,"line_start":104,"line_end":104,"column_start":12,"column_end":33},"name":"RwLockUpgradableGuard","qualname":"::rwlock::RwLockUpgradableGuard","value":"RwLockUpgradableGuard {  }","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610}],"decl_id":null,"docs":" A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`].","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88252,"byte_end":88344,"line_start":97,"line_end":97,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88345,"byte_end":88348,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ No writers or other upgradeable guards can exist while this is in scope. New reader","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88349,"byte_end":88436,"line_start":99,"line_end":99,"column_start":1,"column_end":88}},{"value":"/ creation is prevented (to alleviate writer starvation) but there may be existing readers","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88437,"byte_end":88529,"line_start":100,"line_end":100,"column_start":1,"column_end":93}},{"value":"/ when the lock is acquired.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88530,"byte_end":88560,"line_start":101,"line_end":101,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88561,"byte_end":88564,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88565,"byte_end":88628,"line_start":103,"line_end":103,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89359,"byte_end":89362,"line_start":131,"line_end":131,"column_start":18,"column_end":21},"name":"new","qualname":"<RwLock<T, R>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new spinlock wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new spinlock wrapping the supplied data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88970,"byte_end":89024,"line_start":115,"line_end":115,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89029,"byte_end":89032,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ May be used statically:","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89037,"byte_end":89064,"line_start":117,"line_end":117,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89069,"byte_end":89072,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89077,"byte_end":89084,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89089,"byte_end":89102,"line_start":120,"line_end":120,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89107,"byte_end":89110,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ static RW_LOCK: spin::RwLock<()> = spin::RwLock::new(());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89115,"byte_end":89176,"line_start":122,"line_end":122,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89181,"byte_end":89184,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89189,"byte_end":89204,"line_start":124,"line_end":124,"column_start":5,"column_end":20}},{"value":"/     let lock = RW_LOCK.read();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89209,"byte_end":89243,"line_start":125,"line_end":125,"column_start":5,"column_end":39}},{"value":"/     // do something with lock","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89248,"byte_end":89281,"line_start":126,"line_end":126,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89286,"byte_end":89305,"line_start":127,"line_end":127,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89310,"byte_end":89315,"line_start":128,"line_end":128,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89320,"byte_end":89327,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89332,"byte_end":89341,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89618,"byte_end":89628,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<T, R>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89534,"byte_end":89592,"line_start":139,"line_end":139,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89597,"byte_end":89606,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90678,"byte_end":90688,"line_start":172,"line_end":172,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<RwLock<T, R>>::as_mut_ptr","value":"pub fn as_mut_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the underying data.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the underying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89838,"byte_end":89890,"line_start":147,"line_end":147,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89895,"byte_end":89898,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ This is mostly meant to be used for applications which require manual unlocking, but where","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":89903,"byte_end":89997,"line_start":149,"line_end":149,"column_start":5,"column_end":99}},{"value":"/ storing both the lock and the pointer to the inner data gets inefficient.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90002,"byte_end":90079,"line_start":150,"line_end":150,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90084,"byte_end":90087,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ While this is safe, writing to the data is undefined behavior unless the current thread has","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90092,"byte_end":90187,"line_start":152,"line_end":152,"column_start":5,"column_end":100}},{"value":"/ acquired a write lock, and reading requires either a read or write lock.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90192,"byte_end":90268,"line_start":153,"line_end":153,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90273,"byte_end":90276,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90281,"byte_end":90294,"line_start":155,"line_end":155,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90299,"byte_end":90306,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::RwLock::new(42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90311,"byte_end":90348,"line_start":157,"line_end":157,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90353,"byte_end":90356,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90361,"byte_end":90373,"line_start":159,"line_end":159,"column_start":5,"column_end":17}},{"value":"/     core::mem::forget(lock.write());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90378,"byte_end":90418,"line_start":160,"line_end":160,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90423,"byte_end":90426,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(lock.as_mut_ptr().read(), 42);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90431,"byte_end":90480,"line_start":162,"line_end":162,"column_start":5,"column_end":54}},{"value":"/     lock.as_mut_ptr().write(58);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90485,"byte_end":90521,"line_start":163,"line_end":163,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90526,"byte_end":90529,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/     lock.force_write_unlock();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90534,"byte_end":90568,"line_start":165,"line_end":165,"column_start":5,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90573,"byte_end":90578,"line_start":166,"line_end":166,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90583,"byte_end":90586,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*lock.read(), 58);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90591,"byte_end":90624,"line_start":168,"line_end":168,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90629,"byte_end":90632,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90637,"byte_end":90644,"line_start":170,"line_end":170,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90649,"byte_end":90666,"line_start":171,"line_end":171,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91670,"byte_end":91674,"line_start":200,"line_end":200,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<T, R>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with shared read access, blocking the current thread","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90794,"byte_end":90868,"line_start":178,"line_end":178,"column_start":5,"column_end":79}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90873,"byte_end":90902,"line_start":179,"line_end":179,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90907,"byte_end":90910,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90915,"byte_end":90991,"line_start":181,"line_end":181,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90996,"byte_end":91072,"line_start":182,"line_end":182,"column_start":5,"column_end":81}},{"value":"/ this method returns. This method does not provide any guarantees with","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91077,"byte_end":91150,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ respect to the ordering of whether contentious readers or writers will","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91155,"byte_end":91229,"line_start":184,"line_end":184,"column_start":5,"column_end":79}},{"value":"/ acquire the lock first.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91234,"byte_end":91261,"line_start":185,"line_end":185,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91266,"byte_end":91269,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91274,"byte_end":91346,"line_start":187,"line_end":187,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91351,"byte_end":91374,"line_start":188,"line_end":188,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91379,"byte_end":91382,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91387,"byte_end":91394,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91399,"byte_end":91437,"line_start":191,"line_end":191,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91442,"byte_end":91447,"line_start":192,"line_end":192,"column_start":5,"column_end":10}},{"value":"/     let mut data = mylock.read();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91452,"byte_end":91489,"line_start":193,"line_end":193,"column_start":5,"column_end":42}},{"value":"/     // The lock is now locked and the data can be read","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91494,"byte_end":91552,"line_start":194,"line_end":194,"column_start":5,"column_end":63}},{"value":"/     println!(\"{}\", *data);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91557,"byte_end":91587,"line_start":195,"line_end":195,"column_start":5,"column_end":35}},{"value":"/     // The lock is dropped","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91592,"byte_end":91622,"line_start":196,"line_end":196,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91627,"byte_end":91632,"line_start":197,"line_end":197,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91637,"byte_end":91644,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91649,"byte_end":91658,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92507,"byte_end":92512,"line_start":228,"line_end":228,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<T, R>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, T, R>","parent":null,"children":[],"decl_id":null,"docs":" Lock this rwlock with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Lock this rwlock with exclusive write access, blocking the current","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91873,"byte_end":91943,"line_start":209,"line_end":209,"column_start":5,"column_end":75}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91948,"byte_end":91984,"line_start":210,"line_end":210,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91989,"byte_end":91992,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":91997,"byte_end":92067,"line_start":212,"line_end":212,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92072,"byte_end":92110,"line_start":213,"line_end":213,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92115,"byte_end":92118,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this rwlock","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92123,"byte_end":92196,"line_start":215,"line_end":215,"column_start":5,"column_end":78}},{"value":"/ when dropped.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92201,"byte_end":92218,"line_start":216,"line_end":216,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92223,"byte_end":92226,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92231,"byte_end":92238,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92243,"byte_end":92281,"line_start":219,"line_end":219,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92286,"byte_end":92291,"line_start":220,"line_end":220,"column_start":5,"column_end":10}},{"value":"/     let mut data = mylock.write();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92296,"byte_end":92334,"line_start":221,"line_end":221,"column_start":5,"column_end":43}},{"value":"/     // The lock is now locked and the data can be written","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92339,"byte_end":92400,"line_start":222,"line_end":222,"column_start":5,"column_end":66}},{"value":"/     *data += 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92405,"byte_end":92424,"line_start":223,"line_end":223,"column_start":5,"column_end":24}},{"value":"/     // The lock is dropped","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92429,"byte_end":92459,"line_start":224,"line_end":224,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92464,"byte_end":92469,"line_start":225,"line_end":225,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92474,"byte_end":92481,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92486,"byte_end":92495,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92957,"byte_end":92973,"line_start":240,"line_end":240,"column_start":12,"column_end":28},"name":"upgradeable_read","qualname":"<RwLock<T, R>>::upgradeable_read","value":"pub fn upgradeable_read(&Self) -> RwLockUpgradableGuard<, T, R>","parent":null,"children":[],"decl_id":null,"docs":" Obtain a readable lock guard that can later be upgraded to a writable lock guard.\n Upgrades can be done through the [`RwLockUpgradableGuard::upgrade`](RwLockUpgradableGuard::upgrade) method.\n","sig":null,"attributes":[{"value":"/ Obtain a readable lock guard that can later be upgraded to a writable lock guard.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92730,"byte_end":92815,"line_start":237,"line_end":237,"column_start":5,"column_end":90}},{"value":"/ Upgrades can be done through the [`RwLockUpgradableGuard::upgrade`](RwLockUpgradableGuard::upgrade) method.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92820,"byte_end":92931,"line_start":238,"line_end":238,"column_start":5,"column_end":116}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":92936,"byte_end":92945,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94682,"byte_end":94690,"line_start":289,"line_end":289,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<T, R>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to acquire this lock with shared read access.","sig":null,"attributes":[{"value":"/ Attempt to acquire this lock with shared read access.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":93765,"byte_end":93822,"line_start":266,"line_end":266,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":93827,"byte_end":93830,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ This function will never block and will return immediately if `read`","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":93835,"byte_end":93907,"line_start":268,"line_end":268,"column_start":5,"column_end":77}},{"value":"/ would otherwise succeed. Returns `Some` of an RAII guard which will","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":93912,"byte_end":93983,"line_start":269,"line_end":269,"column_start":5,"column_end":76}},{"value":"/ release the shared access of this thread when dropped, or `None` if the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":93988,"byte_end":94063,"line_start":270,"line_end":270,"column_start":5,"column_end":80}},{"value":"/ access could not be granted. This method does not provide any","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94068,"byte_end":94133,"line_start":271,"line_end":271,"column_start":5,"column_end":70}},{"value":"/ guarantees with respect to the ordering of whether contentious readers","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94138,"byte_end":94212,"line_start":272,"line_end":272,"column_start":5,"column_end":79}},{"value":"/ or writers will acquire the lock first.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94217,"byte_end":94260,"line_start":273,"line_end":273,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94265,"byte_end":94268,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94273,"byte_end":94280,"line_start":275,"line_end":275,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94285,"byte_end":94323,"line_start":276,"line_end":276,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94328,"byte_end":94333,"line_start":277,"line_end":277,"column_start":5,"column_end":10}},{"value":"/     match mylock.try_read() {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94338,"byte_end":94371,"line_start":278,"line_end":278,"column_start":5,"column_end":38}},{"value":"/         Some(data) => {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94376,"byte_end":94403,"line_start":279,"line_end":279,"column_start":5,"column_end":32}},{"value":"/             // The lock is now locked and the data can be read","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94408,"byte_end":94474,"line_start":280,"line_end":280,"column_start":5,"column_end":71}},{"value":"/             println!(\"{}\", *data);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94479,"byte_end":94517,"line_start":281,"line_end":281,"column_start":5,"column_end":43}},{"value":"/             // The lock is dropped","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94522,"byte_end":94560,"line_start":282,"line_end":282,"column_start":5,"column_end":43}},{"value":"/         },","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94565,"byte_end":94579,"line_start":283,"line_end":283,"column_start":5,"column_end":19}},{"value":"/         None => (), // no cigar","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94584,"byte_end":94619,"line_start":284,"line_end":284,"column_start":5,"column_end":40}},{"value":"/     };","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94624,"byte_end":94634,"line_start":285,"line_end":285,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94639,"byte_end":94644,"line_start":286,"line_end":286,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94649,"byte_end":94656,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":94661,"byte_end":94670,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95634,"byte_end":95646,"line_start":312,"line_end":312,"column_start":12,"column_end":24},"name":"reader_count","qualname":"<RwLock<T, R>>::reader_count","value":"pub fn reader_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of readers that currently hold the lock (including upgradable readers).","sig":null,"attributes":[{"value":"/ Return the number of readers that currently hold the lock (including upgradable readers).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95262,"byte_end":95355,"line_start":306,"line_end":306,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95360,"byte_end":95363,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95368,"byte_end":95380,"line_start":308,"line_end":308,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95385,"byte_end":95388,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95393,"byte_end":95502,"line_start":310,"line_end":310,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95507,"byte_end":95622,"line_start":311,"line_end":311,"column_start":5,"column_end":120}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96248,"byte_end":96260,"line_start":325,"line_end":325,"column_start":12,"column_end":24},"name":"writer_count","qualname":"<RwLock<T, R>>::writer_count","value":"pub fn writer_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of writers that currently hold the lock.","sig":null,"attributes":[{"value":"/ Return the number of writers that currently hold the lock.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95786,"byte_end":95848,"line_start":317,"line_end":317,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95853,"byte_end":95856,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ Because [`RwLock`] guarantees exclusive mutable access, this function may only return either `0` or `1`.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95861,"byte_end":95969,"line_start":319,"line_end":319,"column_start":5,"column_end":113}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95974,"byte_end":95977,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95982,"byte_end":95994,"line_start":321,"line_end":321,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":95999,"byte_end":96002,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96007,"byte_end":96116,"line_start":323,"line_end":323,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96121,"byte_end":96236,"line_start":324,"line_end":324,"column_start":5,"column_end":120}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96762,"byte_end":96782,"line_start":338,"line_end":338,"column_start":19,"column_end":39},"name":"force_read_decrement","qualname":"<RwLock<T, R>>::force_read_decrement","value":"pub unsafe fn force_read_decrement(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force decrement the reader count.","sig":null,"attributes":[{"value":"/ Force decrement the reader count.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96352,"byte_end":96389,"line_start":329,"line_end":329,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96394,"byte_end":96397,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96402,"byte_end":96414,"line_start":331,"line_end":331,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96419,"byte_end":96422,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if there are outstanding `RwLockReadGuard`s","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96427,"byte_end":96501,"line_start":333,"line_end":333,"column_start":5,"column_end":79}},{"value":"/ live, or if called more times than `read` has been called, but can be","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96506,"byte_end":96579,"line_start":334,"line_end":334,"column_start":5,"column_end":78}},{"value":"/ useful in FFI contexts where the caller doesn't know how to deal with","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96584,"byte_end":96657,"line_start":335,"line_end":335,"column_start":5,"column_end":78}},{"value":"/ RAII. The underlying atomic operation uses `Ordering::Release`.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96662,"byte_end":96729,"line_start":336,"line_end":336,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96734,"byte_end":96743,"line_start":337,"line_end":337,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":97337,"byte_end":97355,"line_start":352,"line_end":352,"column_start":19,"column_end":37},"name":"force_write_unlock","qualname":"<RwLock<T, R>>::force_write_unlock","value":"pub unsafe fn force_write_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock exclusive write access.","sig":null,"attributes":[{"value":"/ Force unlock exclusive write access.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96931,"byte_end":96971,"line_start":343,"line_end":343,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96976,"byte_end":96979,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":96984,"byte_end":96996,"line_start":345,"line_end":345,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":97001,"byte_end":97004,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if there are outstanding `RwLockWriteGuard`s","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":97009,"byte_end":97084,"line_start":347,"line_end":347,"column_start":5,"column_end":80}},{"value":"/ live, or if called when there are current readers, but can be useful in","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":97089,"byte_end":97164,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/ FFI contexts where the caller doesn't know how to deal with RAII. The","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":97169,"byte_end":97242,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"/ underlying atomic operation uses `Ordering::Release`.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":97247,"byte_end":97304,"line_start":350,"line_end":350,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":97309,"byte_end":97318,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98739,"byte_end":98748,"line_start":399,"line_end":399,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<T, R>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, T, R>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to lock this rwlock with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempt to lock this rwlock with exclusive write access.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98070,"byte_end":98130,"line_start":379,"line_end":379,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98135,"byte_end":98138,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This function does not ever block, and it will return `None` if a call","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98143,"byte_end":98217,"line_start":381,"line_end":381,"column_start":5,"column_end":79}},{"value":"/ to `write` would otherwise block. If successful, an RAII guard is","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98222,"byte_end":98291,"line_start":382,"line_end":382,"column_start":5,"column_end":74}},{"value":"/ returned.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98296,"byte_end":98309,"line_start":383,"line_end":383,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98314,"byte_end":98317,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98322,"byte_end":98329,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98334,"byte_end":98372,"line_start":386,"line_end":386,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98377,"byte_end":98382,"line_start":387,"line_end":387,"column_start":5,"column_end":10}},{"value":"/     match mylock.try_write() {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98387,"byte_end":98421,"line_start":388,"line_end":388,"column_start":5,"column_end":39}},{"value":"/         Some(mut data) => {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98426,"byte_end":98457,"line_start":389,"line_end":389,"column_start":5,"column_end":36}},{"value":"/             // The lock is now locked and the data can be written","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98462,"byte_end":98531,"line_start":390,"line_end":390,"column_start":5,"column_end":74}},{"value":"/             *data += 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98536,"byte_end":98563,"line_start":391,"line_end":391,"column_start":5,"column_end":32}},{"value":"/             // The lock is implicitly dropped","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98568,"byte_end":98617,"line_start":392,"line_end":392,"column_start":5,"column_end":54}},{"value":"/         },","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98622,"byte_end":98636,"line_start":393,"line_end":393,"column_start":5,"column_end":19}},{"value":"/         None => (), // no cigar","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98641,"byte_end":98676,"line_start":394,"line_end":394,"column_start":5,"column_end":40}},{"value":"/     };","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98681,"byte_end":98691,"line_start":395,"line_end":395,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98696,"byte_end":98701,"line_start":396,"line_end":396,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98706,"byte_end":98713,"line_start":397,"line_end":397,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98718,"byte_end":98727,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98913,"byte_end":98933,"line_start":405,"line_end":405,"column_start":12,"column_end":32},"name":"try_upgradeable_read","qualname":"<RwLock<T, R>>::try_upgradeable_read","value":"pub fn try_upgradeable_read(&Self) -> Option<RwLockUpgradableGuard<, T, R>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to obtain an upgradeable lock guard.\n","sig":null,"attributes":[{"value":"/ Tries to obtain an upgradeable lock guard.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98841,"byte_end":98887,"line_start":403,"line_end":403,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":98892,"byte_end":98901,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99862,"byte_end":99869,"line_start":431,"line_end":431,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<T, R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99466,"byte_end":99521,"line_start":419,"line_end":419,"column_start":4,"column_end":59}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99525,"byte_end":99528,"line_start":420,"line_end":420,"column_start":4,"column_end":7}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99532,"byte_end":99608,"line_start":421,"line_end":421,"column_start":4,"column_end":80}},{"value":"/ take place -- the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99612,"byte_end":99686,"line_start":422,"line_end":422,"column_start":4,"column_end":78}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99690,"byte_end":99693,"line_start":423,"line_end":423,"column_start":4,"column_end":7}},{"value":"/ # Examples","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99697,"byte_end":99711,"line_start":424,"line_end":424,"column_start":4,"column_end":18}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99715,"byte_end":99718,"line_start":425,"line_end":425,"column_start":4,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99722,"byte_end":99729,"line_start":426,"line_end":426,"column_start":4,"column_end":11}},{"value":"/ let mut lock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99733,"byte_end":99773,"line_start":427,"line_end":427,"column_start":4,"column_end":44}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99777,"byte_end":99802,"line_start":428,"line_end":428,"column_start":4,"column_end":29}},{"value":"/ assert_eq!(*lock.read(), 10);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99806,"byte_end":99839,"line_start":429,"line_end":429,"column_start":4,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":99843,"byte_end":99850,"line_start":430,"line_end":430,"column_start":4,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101139,"byte_end":101143,"line_start":474,"line_end":474,"column_start":12,"column_end":16},"name":"leak","qualname":"<RwLockReadGuard>::leak","value":"pub fn leak(Self) -> &'rwlock T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a reference to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100747,"byte_end":100816,"line_start":462,"line_end":462,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100821,"byte_end":100824,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original lock for all but reading locks.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100829,"byte_end":100923,"line_start":464,"line_end":464,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100928,"byte_end":100931,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100936,"byte_end":100943,"line_start":466,"line_end":466,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100948,"byte_end":100986,"line_start":467,"line_end":467,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100991,"byte_end":100994,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ let data: &i32 = spin::RwLockReadGuard::leak(mylock.read());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100999,"byte_end":101063,"line_start":469,"line_end":469,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101068,"byte_end":101071,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*data, 0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101076,"byte_end":101101,"line_start":471,"line_end":471,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101106,"byte_end":101113,"line_start":472,"line_end":472,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101118,"byte_end":101127,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":102004,"byte_end":102011,"line_start":502,"line_end":502,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Upgrades an upgradeable lock guard to a writable lock guard.","sig":null,"attributes":[{"value":"/ Upgrades an upgradeable lock guard to a writable lock guard.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101698,"byte_end":101762,"line_start":493,"line_end":493,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101767,"byte_end":101770,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101775,"byte_end":101782,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101787,"byte_end":101825,"line_start":496,"line_end":496,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101830,"byte_end":101833,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ let upgradeable = mylock.upgradeable_read(); // Readable, but not yet writable","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101838,"byte_end":101920,"line_start":498,"line_end":498,"column_start":5,"column_end":87}},{"value":"/ let writable = upgradeable.upgrade();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101925,"byte_end":101966,"line_start":499,"line_end":499,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101971,"byte_end":101978,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101983,"byte_end":101992,"line_start":501,"line_end":501,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103573,"byte_end":103584,"line_start":555,"line_end":555,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to upgrade an upgradeable lock guard to a writable lock guard.","sig":null,"attributes":[{"value":"/ Tries to upgrade an upgradeable lock guard to a writable lock guard.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103106,"byte_end":103178,"line_start":543,"line_end":543,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103183,"byte_end":103186,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103191,"byte_end":103198,"line_start":545,"line_end":545,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103203,"byte_end":103241,"line_start":546,"line_end":546,"column_start":5,"column_end":43}},{"value":"/ let upgradeable = mylock.upgradeable_read(); // Readable, but not yet writable","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103246,"byte_end":103328,"line_start":547,"line_end":547,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103333,"byte_end":103336,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ match upgradeable.try_upgrade() {","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103341,"byte_end":103378,"line_start":549,"line_end":549,"column_start":5,"column_end":42}},{"value":"/     Ok(writable) => /* upgrade successful - use writable lock guard */ (),","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103383,"byte_end":103461,"line_start":550,"line_end":550,"column_start":5,"column_end":83}},{"value":"/     Err(upgradeable) => /* upgrade unsuccessful */ (),","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103466,"byte_end":103524,"line_start":551,"line_end":551,"column_start":5,"column_end":63}},{"value":"/ };","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103529,"byte_end":103535,"line_start":552,"line_end":552,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103540,"byte_end":103547,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103552,"byte_end":103561,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104226,"byte_end":104235,"line_start":573,"line_end":573,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the upgradeable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103693,"byte_end":103702,"line_start":559,"line_end":559,"column_start":5,"column_end":14}},{"value":"/ Downgrades the upgradeable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103707,"byte_end":103825,"line_start":560,"line_end":560,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103830,"byte_end":103833,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103838,"byte_end":103845,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103850,"byte_end":103888,"line_start":563,"line_end":563,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103893,"byte_end":103896,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ let upgradeable = mylock.upgradeable_read();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103901,"byte_end":103949,"line_start":565,"line_end":565,"column_start":5,"column_end":53}},{"value":"/ assert!(mylock.try_read().is_none());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":103954,"byte_end":103995,"line_start":566,"line_end":566,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(*upgradeable, 1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104000,"byte_end":104032,"line_start":567,"line_end":567,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104037,"byte_end":104040,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ let readable = upgradeable.downgrade(); // This is guaranteed not to spin","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104045,"byte_end":104122,"line_start":569,"line_end":569,"column_start":5,"column_end":82}},{"value":"/ assert!(mylock.try_read().is_some());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104127,"byte_end":104168,"line_start":570,"line_end":570,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104173,"byte_end":104202,"line_start":571,"line_end":571,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104207,"byte_end":104214,"line_start":572,"line_end":572,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104981,"byte_end":104985,"line_start":600,"line_end":600,"column_start":12,"column_end":16},"name":"leak","qualname":"<RwLockUpgradableGuard>::leak","value":"pub fn leak(Self) -> &'rwlock T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a reference to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104597,"byte_end":104666,"line_start":588,"line_end":588,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104671,"byte_end":104674,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original lock.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104679,"byte_end":104747,"line_start":590,"line_end":590,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104752,"byte_end":104755,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104760,"byte_end":104767,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104772,"byte_end":104810,"line_start":593,"line_end":593,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104815,"byte_end":104818,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let data: &i32 = spin::RwLockUpgradableGuard::leak(mylock.upgradeable_read());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104823,"byte_end":104905,"line_start":595,"line_end":595,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104910,"byte_end":104913,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*data, 0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104918,"byte_end":104943,"line_start":597,"line_end":597,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104948,"byte_end":104955,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":104960,"byte_end":104969,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106010,"byte_end":106019,"line_start":632,"line_end":632,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the writable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"/ Downgrades the writable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105544,"byte_end":105659,"line_start":619,"line_end":619,"column_start":5,"column_end":120}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105664,"byte_end":105667,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105672,"byte_end":105679,"line_start":621,"line_end":621,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105684,"byte_end":105722,"line_start":622,"line_end":622,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105727,"byte_end":105730,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ let mut writable = mylock.write();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105735,"byte_end":105773,"line_start":624,"line_end":624,"column_start":5,"column_end":43}},{"value":"/ *writable = 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105778,"byte_end":105796,"line_start":625,"line_end":625,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105801,"byte_end":105804,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ let readable = writable.downgrade(); // This is guaranteed not to spin","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105809,"byte_end":105883,"line_start":627,"line_end":627,"column_start":5,"column_end":79}},{"value":"/ # let readable_2 = mylock.try_read().unwrap();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105888,"byte_end":105938,"line_start":628,"line_end":628,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105943,"byte_end":105972,"line_start":629,"line_end":629,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105977,"byte_end":105984,"line_start":630,"line_end":630,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105989,"byte_end":105998,"line_start":631,"line_end":631,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106810,"byte_end":106834,"line_start":659,"line_end":659,"column_start":12,"column_end":36},"name":"downgrade_to_upgradeable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradeable","value":"pub fn downgrade_to_upgradeable(Self) -> RwLockUpgradableGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the writable lock guard to an upgradable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"/ Downgrades the writable lock guard to an upgradable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106381,"byte_end":106499,"line_start":647,"line_end":647,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106504,"byte_end":106507,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106512,"byte_end":106519,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106524,"byte_end":106562,"line_start":650,"line_end":650,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106567,"byte_end":106570,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ let mut writable = mylock.write();","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106575,"byte_end":106613,"line_start":652,"line_end":652,"column_start":5,"column_end":43}},{"value":"/ *writable = 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106618,"byte_end":106636,"line_start":653,"line_end":653,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106641,"byte_end":106644,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ let readable = writable.downgrade_to_upgradeable(); // This is guaranteed not to spin","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106649,"byte_end":106738,"line_start":655,"line_end":655,"column_start":5,"column_end":94}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106743,"byte_end":106772,"line_start":656,"line_end":656,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106777,"byte_end":106784,"line_start":657,"line_end":657,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":106789,"byte_end":106798,"line_start":658,"line_end":658,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107755,"byte_end":107759,"line_start":690,"line_end":690,"column_start":12,"column_end":16},"name":"leak","qualname":"<RwLockWriteGuard>::leak","value":"pub fn leak(Self) -> &'rwlock mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107356,"byte_end":107433,"line_start":677,"line_end":677,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107438,"byte_end":107441,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original lock.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107446,"byte_end":107514,"line_start":679,"line_end":679,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107519,"byte_end":107522,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107527,"byte_end":107534,"line_start":681,"line_end":681,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107539,"byte_end":107577,"line_start":682,"line_end":682,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107582,"byte_end":107585,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::RwLockWriteGuard::leak(mylock.write());","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107590,"byte_end":107660,"line_start":684,"line_end":684,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107665,"byte_end":107668,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107673,"byte_end":107687,"line_start":686,"line_end":686,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107692,"byte_end":107717,"line_start":687,"line_end":687,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107722,"byte_end":107729,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":107734,"byte_end":107743,"line_start":689,"line_end":689,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":771},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"relax","qualname":"::relax","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780}],"decl_id":null,"docs":" Strategies that determine the behaviour of locks when encountering contention.\n","sig":null,"attributes":[{"value":"/ Strategies that determine the behaviour of locks when encountering contention.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":119790,"byte_end":119872,"line_start":1,"line_end":1,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":772},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":119938,"byte_end":119951,"line_start":4,"line_end":4,"column_start":11,"column_end":24},"name":"RelaxStrategy","qualname":"::relax::RelaxStrategy","value":"RelaxStrategy","parent":null,"children":[{"krate":0,"index":773}],"decl_id":null,"docs":" A trait implemented by spinning relax strategies.\n","sig":null,"attributes":[{"value":"/ A trait implemented by spinning relax strategies.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":119874,"byte_end":119927,"line_start":3,"line_end":3,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120031,"byte_end":120036,"line_start":6,"line_end":6,"column_start":8,"column_end":13},"name":"relax","qualname":"::relax::RelaxStrategy::relax","value":"pub fn relax()","parent":{"krate":0,"index":772},"children":[],"decl_id":null,"docs":" Perform the relaxing operation during a period of contention.\n","sig":null,"attributes":[{"value":"/ Perform the relaxing operation during a period of contention.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":119958,"byte_end":120023,"line_start":5,"line_end":5,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":774},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":121011,"byte_end":121015,"line_start":21,"line_end":21,"column_start":12,"column_end":16},"name":"Spin","qualname":"::relax::Spin","value":"","parent":null,"children":[],"decl_id":null,"docs":" A strategy that rapidly spins while informing the CPU that it should power down non-essential components via\n [`core::hint::spin_loop`].","sig":null,"attributes":[{"value":"/ A strategy that rapidly spins while informing the CPU that it should power down non-essential components via","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120043,"byte_end":120155,"line_start":9,"line_end":9,"column_start":1,"column_end":113}},{"value":"/ [`core::hint::spin_loop`].","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120156,"byte_end":120186,"line_start":10,"line_end":10,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120187,"byte_end":120190,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Note that spinning is a 'dumb' strategy and most schedulers cannot correctly differentiate it from useful work,","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120191,"byte_end":120306,"line_start":12,"line_end":12,"column_start":1,"column_end":116}},{"value":"/ thereby misallocating even more CPU time to the spinning process. This is known as","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120307,"byte_end":120393,"line_start":13,"line_end":13,"column_start":1,"column_end":87}},{"value":"/ ['priority inversion'](https://matklad.github.io/2020/01/02/spinlocks-considered-harmful.html).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120394,"byte_end":120493,"line_start":14,"line_end":14,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120494,"byte_end":120497,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ If you see signs that priority inversion is occurring, consider switching to [`Yield`] or, even better, not using a","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120498,"byte_end":120617,"line_start":16,"line_end":16,"column_start":1,"column_end":120}},{"value":"/ spinlock at all and opting for a proper scheduler-aware lock. Remember also that different targets, operating","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120618,"byte_end":120731,"line_start":17,"line_end":17,"column_start":1,"column_end":114}},{"value":"/ systems, schedulers, and even the same scheduler with different workloads will exhibit different behaviour. Just","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120732,"byte_end":120848,"line_start":18,"line_end":18,"column_start":1,"column_end":117}},{"value":"/ because priority inversion isn't occurring in your tests does not mean that it will not occur. Use a scheduler-","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120849,"byte_end":120964,"line_start":19,"line_end":19,"column_start":1,"column_end":116}},{"value":"/ aware lock if at all possible.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":120965,"byte_end":120999,"line_start":20,"line_end":20,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":778},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":122224,"byte_end":122228,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"name":"Loop","qualname":"::relax::Loop","value":"","parent":null,"children":[],"decl_id":null,"docs":" A strategy that rapidly spins, without telling the CPU to do any powering down.","sig":null,"attributes":[{"value":"/ A strategy that rapidly spins, without telling the CPU to do any powering down.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":121828,"byte_end":121911,"line_start":48,"line_end":48,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":121912,"byte_end":121915,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ You almost certainly do not want to use this. Use [`Spin`] instead. It exists for completeness and for targets","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":121916,"byte_end":122030,"line_start":50,"line_end":50,"column_start":1,"column_end":115}},{"value":"/ that, for some reason, miscompile or do not support spin hint intrinsics despite attempting to generate code for","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":122031,"byte_end":122147,"line_start":51,"line_end":51,"column_start":1,"column_end":117}},{"value":"/ them (i.e: this is a workaround for possible compiler bugs).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":122148,"byte_end":122212,"line_start":52,"line_end":52,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":795},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4084,"byte_end":4091,"line_start":109,"line_end":109,"column_start":10,"column_end":17},"name":"Barrier","qualname":"::Barrier","value":"crate::barrier::Barrier","parent":null,"children":[],"decl_id":null,"docs":" A primitive that synchronizes the execution of multiple threads. See [`barrier::Barrier`] for documentation.","sig":null,"attributes":[{"value":"/ A primitive that synchronizes the execution of multiple threads. See [`barrier::Barrier`] for documentation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":3666,"byte_end":3778,"line_start":103,"line_end":103,"column_start":1,"column_end":113}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":3779,"byte_end":3782,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":3783,"byte_end":3894,"line_start":105,"line_end":105,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":3895,"byte_end":3995,"line_start":106,"line_end":106,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"barrier\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":3996,"byte_end":4023,"line_start":107,"line_end":107,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":796},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4511,"byte_end":4515,"line_start":117,"line_end":117,"column_start":10,"column_end":14},"name":"Lazy","qualname":"::Lazy","value":"crate::lazy::Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" A value which is initialized on the first access. See [`lazy::Lazy`] for documentation.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access. See [`lazy::Lazy`] for documentation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4120,"byte_end":4211,"line_start":111,"line_end":111,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4212,"byte_end":4215,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4216,"byte_end":4327,"line_start":113,"line_end":113,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4328,"byte_end":4428,"line_start":114,"line_end":114,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"lazy\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4429,"byte_end":4453,"line_start":115,"line_end":115,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":799},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4972,"byte_end":4977,"line_start":125,"line_end":125,"column_start":10,"column_end":15},"name":"Mutex","qualname":"::Mutex","value":"crate::mutex::Mutex<T>","parent":null,"children":[],"decl_id":null,"docs":" A primitive that synchronizes the execution of multiple threads. See [`mutex::Mutex`] for documentation.","sig":null,"attributes":[{"value":"/ A primitive that synchronizes the execution of multiple threads. See [`mutex::Mutex`] for documentation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4562,"byte_end":4670,"line_start":119,"line_end":119,"column_start":1,"column_end":109}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4671,"byte_end":4674,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4675,"byte_end":4786,"line_start":121,"line_end":121,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4787,"byte_end":4887,"line_start":122,"line_end":122,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"mutex\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":4888,"byte_end":4913,"line_start":123,"line_end":123,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":801},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5405,"byte_end":5409,"line_start":133,"line_end":133,"column_start":10,"column_end":14},"name":"Once","qualname":"::Once","value":"crate::once::Once<T>","parent":null,"children":[],"decl_id":null,"docs":" A primitive that provides lazy one-time initialization. See [`once::Once`] for documentation.","sig":null,"attributes":[{"value":"/ A primitive that provides lazy one-time initialization. See [`once::Once`] for documentation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5008,"byte_end":5105,"line_start":127,"line_end":127,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5106,"byte_end":5109,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5110,"byte_end":5221,"line_start":129,"line_end":129,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5222,"byte_end":5322,"line_start":130,"line_end":130,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"once\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5323,"byte_end":5347,"line_start":131,"line_end":131,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":803},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5863,"byte_end":5869,"line_start":141,"line_end":141,"column_start":10,"column_end":16},"name":"RwLock","qualname":"::RwLock","value":"crate::rwlock::RwLock<T>","parent":null,"children":[],"decl_id":null,"docs":" A lock that provides data access to either one writer or many readers. See [`rwlock::RwLock`] for documentation.","sig":null,"attributes":[{"value":"/ A lock that provides data access to either one writer or many readers. See [`rwlock::RwLock`] for documentation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5443,"byte_end":5559,"line_start":135,"line_end":135,"column_start":1,"column_end":117}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5560,"byte_end":5563,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5564,"byte_end":5675,"line_start":137,"line_end":137,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5676,"byte_end":5776,"line_start":138,"line_end":138,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5777,"byte_end":5803,"line_start":139,"line_end":139,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":805},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6359,"byte_end":6380,"line_start":150,"line_end":150,"column_start":10,"column_end":31},"name":"RwLockUpgradableGuard","qualname":"::RwLockUpgradableGuard","value":"crate::rwlock::RwLockUpgradableGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`]. See\n [`rwlock::RwLockUpgradableGuard`] for documentation.","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`]. See","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5902,"byte_end":5998,"line_start":143,"line_end":143,"column_start":1,"column_end":97}},{"value":"/ [`rwlock::RwLockUpgradableGuard`] for documentation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":5999,"byte_end":6055,"line_start":144,"line_end":144,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6056,"byte_end":6059,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6060,"byte_end":6171,"line_start":146,"line_end":146,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6172,"byte_end":6272,"line_start":147,"line_end":147,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6273,"byte_end":6299,"line_start":148,"line_end":148,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":808},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6838,"byte_end":6854,"line_start":158,"line_end":158,"column_start":10,"column_end":26},"name":"RwLockWriteGuard","qualname":"::RwLockWriteGuard","value":"crate::rwlock::RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides mutable data access. See [`rwlock::RwLockWriteGuard`] for documentation.","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access. See [`rwlock::RwLockWriteGuard`] for documentation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6436,"byte_end":6534,"line_start":152,"line_end":152,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6535,"byte_end":6538,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6539,"byte_end":6650,"line_start":154,"line_end":154,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6651,"byte_end":6751,"line_start":155,"line_end":155,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6752,"byte_end":6778,"line_start":156,"line_end":156,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":811},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7100,"byte_end":7108,"line_start":163,"line_end":163,"column_start":9,"column_end":17},"name":"lock_api","qualname":"::lock_api","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":817},{"krate":0,"index":819},{"krate":0,"index":822},{"krate":0,"index":825}],"decl_id":null,"docs":" Spin synchronisation primitives, but compatible with [`lock_api`](https://crates.io/crates/lock_api).\n","sig":null,"attributes":[{"value":"/ Spin synchronisation primitives, but compatible with [`lock_api`](https://crates.io/crates/lock_api).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":6905,"byte_end":7010,"line_start":160,"line_end":160,"column_start":1,"column_end":106}},{"value":"cfg(feature = \"lock_api\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7011,"byte_end":7039,"line_start":161,"line_end":161,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":812},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7334,"byte_end":7339,"line_start":167,"line_end":167,"column_start":14,"column_end":19},"name":"Mutex","qualname":"::lock_api::Mutex","value":"lock_api_crate::Mutex<crate::Mutex<()>, T>","parent":null,"children":[],"decl_id":null,"docs":" A lock that provides mutually exclusive data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A lock that provides mutually exclusive data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7115,"byte_end":7237,"line_start":164,"line_end":164,"column_start":5,"column_end":127}},{"value":"cfg(feature = \"mutex\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7242,"byte_end":7267,"line_start":165,"line_end":165,"column_start":5,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":814},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7603,"byte_end":7613,"line_start":172,"line_end":172,"column_start":14,"column_end":24},"name":"MutexGuard","qualname":"::lock_api::MutexGuard","value":"lock_api_crate::MutexGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides mutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7394,"byte_end":7506,"line_start":169,"line_end":169,"column_start":5,"column_end":117}},{"value":"cfg(feature = \"mutex\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7511,"byte_end":7536,"line_start":170,"line_end":170,"column_start":5,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":817},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7920,"byte_end":7926,"line_start":177,"line_end":177,"column_start":14,"column_end":20},"name":"RwLock","qualname":"::lock_api::RwLock","value":"lock_api_crate::RwLock<crate::RwLock<()>, T>","parent":null,"children":[],"decl_id":null,"docs":" A lock that provides data access to either one writer or many readers (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A lock that provides data access to either one writer or many readers (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7681,"byte_end":7821,"line_start":174,"line_end":174,"column_start":5,"column_end":145}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7826,"byte_end":7852,"line_start":175,"line_end":175,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":819},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":8196,"byte_end":8211,"line_start":182,"line_end":182,"column_start":14,"column_end":29},"name":"RwLockReadGuard","qualname":"::lock_api::RwLockReadGuard","value":"lock_api_crate::RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides immutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":7983,"byte_end":8097,"line_start":179,"line_end":179,"column_start":5,"column_end":119}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":8102,"byte_end":8128,"line_start":180,"line_end":180,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":822},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":8496,"byte_end":8512,"line_start":187,"line_end":187,"column_start":14,"column_end":30},"name":"RwLockWriteGuard","qualname":"::lock_api::RwLockWriteGuard","value":"lock_api_crate::RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides mutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":8285,"byte_end":8397,"line_start":184,"line_end":184,"column_start":5,"column_end":117}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":8402,"byte_end":8428,"line_start":185,"line_end":185,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":825},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":8844,"byte_end":8869,"line_start":192,"line_end":192,"column_start":14,"column_end":39},"name":"RwLockUpgradableReadGuard","qualname":"::lock_api::RwLockUpgradableReadGuard","value":"lock_api_crate::RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`] (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`] (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":8587,"byte_end":8745,"line_start":189,"line_end":189,"column_start":5,"column_end":163}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":8750,"byte_end":8776,"line_start":190,"line_end":190,"column_start":5,"column_end":31}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11038,"byte_end":11045,"line_start":72,"line_end":72,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13144,"byte_end":13151,"line_start":135,"line_end":135,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13869,"byte_end":13886,"line_start":162,"line_end":162,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16979,"byte_end":16983,"line_start":46,"line_end":46,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17435,"byte_end":17439,"line_start":57,"line_end":57,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17519,"byte_end":17523,"line_start":60,"line_end":60,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18166,"byte_end":18170,"line_start":76,"line_end":76,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18823,"byte_end":18827,"line_start":99,"line_end":99,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18956,"byte_end":18960,"line_start":107,"line_end":107,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30501,"byte_end":30510,"line_start":79,"line_end":79,"column_start":43,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30562,"byte_end":30571,"line_start":80,"line_end":80,"column_start":43,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30593,"byte_end":30602,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32434,"byte_end":32443,"line_start":150,"line_end":150,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33608,"byte_end":33617,"line_start":183,"line_end":183,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36258,"byte_end":36267,"line_start":256,"line_end":256,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36636,"byte_end":36645,"line_start":267,"line_end":267,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36751,"byte_end":36760,"line_start":273,"line_end":273,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36853,"byte_end":36867,"line_start":279,"line_end":279,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37572,"byte_end":37586,"line_start":300,"line_end":300,"column_start":49,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37752,"byte_end":37766,"line_start":306,"line_end":306,"column_start":53,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37912,"byte_end":37926,"line_start":312,"line_end":312,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":38045,"byte_end":38059,"line_start":319,"line_end":319,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":38165,"byte_end":38179,"line_start":325,"line_end":325,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":38444,"byte_end":38453,"line_start":333,"line_end":333,"column_start":60,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45662,"byte_end":45673,"line_start":90,"line_end":90,"column_start":43,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45725,"byte_end":45736,"line_start":91,"line_end":91,"column_start":43,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45758,"byte_end":45769,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47512,"byte_end":47523,"line_start":158,"line_end":158,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47885,"byte_end":47896,"line_start":169,"line_end":169,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49167,"byte_end":49178,"line_start":206,"line_end":206,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52307,"byte_end":52318,"line_start":290,"line_end":290,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52424,"byte_end":52435,"line_start":296,"line_end":296,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52528,"byte_end":52544,"line_start":302,"line_end":302,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":53255,"byte_end":53271,"line_start":323,"line_end":323,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":53437,"byte_end":53453,"line_start":329,"line_end":329,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":53599,"byte_end":53615,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":53734,"byte_end":53750,"line_start":342,"line_end":342,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":53856,"byte_end":53872,"line_start":348,"line_end":348,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":54110,"byte_end":54121,"line_start":356,"line_end":356,"column_start":60,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22419,"byte_end":22424,"line_start":103,"line_end":103,"column_start":43,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22476,"byte_end":22481,"line_start":104,"line_end":104,"column_start":43,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22882,"byte_end":22887,"line_start":117,"line_end":117,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23690,"byte_end":23695,"line_start":152,"line_end":152,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24388,"byte_end":24393,"line_start":175,"line_end":175,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26471,"byte_end":26476,"line_start":239,"line_end":239,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26634,"byte_end":26639,"line_start":245,"line_end":245,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26745,"byte_end":26750,"line_start":251,"line_end":251,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26843,"byte_end":26853,"line_start":257,"line_end":257,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27402,"byte_end":27412,"line_start":276,"line_end":276,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27578,"byte_end":27588,"line_start":282,"line_end":282,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27734,"byte_end":27744,"line_start":288,"line_end":288,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27866,"byte_end":27876,"line_start":295,"line_end":295,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":28048,"byte_end":28053,"line_start":302,"line_end":302,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59692,"byte_end":59696,"line_start":40,"line_end":40,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59787,"byte_end":59791,"line_start":44,"line_end":44,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":60217,"byte_end":60221,"line_start":57,"line_end":57,"column_start":41,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":60264,"byte_end":60268,"line_start":58,"line_end":58,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":60932,"byte_end":60938,"line_start":79,"line_end":79,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":61253,"byte_end":61265,"line_start":90,"line_end":90,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63206,"byte_end":63210,"line_start":131,"line_end":131,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":517},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":73940,"byte_end":73944,"line_start":357,"line_end":357,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78857,"byte_end":78861,"line_start":475,"line_end":475,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78962,"byte_end":78966,"line_start":481,"line_end":481,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":79393,"byte_end":79399,"line_start":497,"line_end":497,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88858,"byte_end":88864,"line_start":111,"line_end":111,"column_start":43,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88923,"byte_end":88929,"line_start":112,"line_end":112,"column_start":50,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88951,"byte_end":88957,"line_start":114,"line_end":114,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90775,"byte_end":90781,"line_start":177,"line_end":177,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":93210,"byte_end":93216,"line_start":250,"line_end":250,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100120,"byte_end":100126,"line_start":438,"line_end":438,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100497,"byte_end":100503,"line_start":449,"line_end":449,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100609,"byte_end":100615,"line_start":455,"line_end":455,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100713,"byte_end":100728,"line_start":461,"line_end":461,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101285,"byte_end":101300,"line_start":480,"line_end":480,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101476,"byte_end":101491,"line_start":486,"line_end":486,"column_start":58,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101655,"byte_end":101676,"line_start":492,"line_end":492,"column_start":44,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":102293,"byte_end":102314,"line_start":514,"line_end":514,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105130,"byte_end":105151,"line_start":606,"line_end":606,"column_start":57,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105333,"byte_end":105354,"line_start":612,"line_end":612,"column_start":61,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105506,"byte_end":105522,"line_start":618,"line_end":618,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108024,"byte_end":108040,"line_start":697,"line_end":697,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108222,"byte_end":108238,"line_start":703,"line_end":703,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108397,"byte_end":108412,"line_start":709,"line_end":709,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108542,"byte_end":108563,"line_start":717,"line_end":717,"column_start":39,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108696,"byte_end":108712,"line_start":725,"line_end":725,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108848,"byte_end":108864,"line_start":733,"line_end":733,"column_start":42,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108983,"byte_end":108998,"line_start":739,"line_end":739,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":109225,"byte_end":109246,"line_start":746,"line_end":746,"column_start":38,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":109531,"byte_end":109547,"line_start":756,"line_end":756,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":110397,"byte_end":110403,"line_start":783,"line_end":783,"column_start":61,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":111716,"byte_end":111722,"line_start":836,"line_end":836,"column_start":68,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":112915,"byte_end":112921,"line_start":880,"line_end":880,"column_start":70,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":121041,"byte_end":121045,"line_start":23,"line_end":23,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":122254,"byte_end":122258,"line_start":55,"line_end":55,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2592,"byte_end":2599,"line_start":73,"line_end":73,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2682,"byte_end":2686,"line_start":76,"line_end":76,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":36}},{"kind":"Mod","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2771,"byte_end":2776,"line_start":79,"line_end":79,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":93}},{"kind":"Mod","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":19881,"byte_end":19885,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":94}},{"kind":"Mod","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":20119,"byte_end":20125,"line_start":25,"line_end":25,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":214}},{"kind":"Mod","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2859,"byte_end":2863,"line_start":82,"line_end":82,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":434}},{"kind":"Mod","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2950,"byte_end":2956,"line_start":85,"line_end":85,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":548}},{"kind":"Mod","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lib.rs","byte_start":2966,"byte_end":2971,"line_start":86,"line_end":86,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":771}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":11038,"byte_end":11045,"line_start":72,"line_end":72,"column_start":24,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13144,"byte_end":13151,"line_start":135,"line_end":135,"column_start":9,"column_end":16},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/barrier.rs","byte_start":13869,"byte_end":13886,"line_start":162,"line_end":162,"column_start":6,"column_end":23},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":25},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":16979,"byte_end":16983,"line_start":46,"line_end":46,"column_start":42,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":57},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17435,"byte_end":17439,"line_start":57,"line_end":57,"column_start":34,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":57},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":17519,"byte_end":17523,"line_start":60,"line_end":60,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":57},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18166,"byte_end":18170,"line_start":76,"line_end":76,"column_start":45,"column_end":49},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":57},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18823,"byte_end":18827,"line_start":99,"line_end":99,"column_start":55,"column_end":59},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":57},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/lazy.rs","byte_start":18956,"byte_end":18960,"line_start":107,"line_end":107,"column_start":33,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":57},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30501,"byte_end":30510,"line_start":79,"line_end":79,"column_start":43,"column_end":52},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":126},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30562,"byte_end":30571,"line_start":80,"line_end":80,"column_start":43,"column_end":52},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":126},"to":{"krate":1,"index":3108}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":30593,"byte_end":30602,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":32434,"byte_end":32443,"line_start":150,"line_end":150,"column_start":35,"column_end":44},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":33608,"byte_end":33617,"line_start":183,"line_end":183,"column_start":20,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36258,"byte_end":36267,"line_start":256,"line_end":256,"column_start":48,"column_end":57},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":126},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36636,"byte_end":36645,"line_start":267,"line_end":267,"column_start":42,"column_end":51},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":126},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36751,"byte_end":36760,"line_start":273,"line_end":273,"column_start":24,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":126},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":36853,"byte_end":36867,"line_start":279,"line_end":279,"column_start":21,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37572,"byte_end":37586,"line_start":300,"line_end":300,"column_start":49,"column_end":63},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":132},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37752,"byte_end":37766,"line_start":306,"line_end":306,"column_start":53,"column_end":67},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":132},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":37912,"byte_end":37926,"line_start":312,"line_end":312,"column_start":31,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":132},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":38045,"byte_end":38059,"line_start":319,"line_end":319,"column_start":34,"column_end":48},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":132},"to":{"krate":1,"index":3340}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":38165,"byte_end":38179,"line_start":325,"line_end":325,"column_start":30,"column_end":44},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":132},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/spin.rs","byte_start":38444,"byte_end":38453,"line_start":333,"line_end":333,"column_start":60,"column_end":69},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":126},"to":{"krate":4,"index":32}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45662,"byte_end":45673,"line_start":90,"line_end":90,"column_start":43,"column_end":54},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":246},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45725,"byte_end":45736,"line_start":91,"line_end":91,"column_start":43,"column_end":54},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":246},"to":{"krate":1,"index":3108}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":45758,"byte_end":45769,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47512,"byte_end":47523,"line_start":158,"line_end":158,"column_start":48,"column_end":59},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":246},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":47885,"byte_end":47896,"line_start":169,"line_end":169,"column_start":35,"column_end":46},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":49167,"byte_end":49178,"line_start":206,"line_end":206,"column_start":20,"column_end":31},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52307,"byte_end":52318,"line_start":290,"line_end":290,"column_start":42,"column_end":53},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":246},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52424,"byte_end":52435,"line_start":296,"line_end":296,"column_start":24,"column_end":35},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":246},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":52528,"byte_end":52544,"line_start":302,"line_end":302,"column_start":21,"column_end":37},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":53255,"byte_end":53271,"line_start":323,"line_end":323,"column_start":49,"column_end":65},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":253},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":53437,"byte_end":53453,"line_start":329,"line_end":329,"column_start":53,"column_end":69},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":253},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":53599,"byte_end":53615,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":253},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":53734,"byte_end":53750,"line_start":342,"line_end":342,"column_start":34,"column_end":50},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":253},"to":{"krate":1,"index":3340}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":53856,"byte_end":53872,"line_start":348,"line_end":348,"column_start":30,"column_end":46},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":253},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex/ticket.rs","byte_start":54110,"byte_end":54121,"line_start":356,"line_end":356,"column_start":60,"column_end":71},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":246},"to":{"krate":4,"index":32}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22419,"byte_end":22424,"line_start":103,"line_end":103,"column_start":43,"column_end":48},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22476,"byte_end":22481,"line_start":104,"line_end":104,"column_start":43,"column_end":48},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":3108}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":22882,"byte_end":22887,"line_start":117,"line_end":117,"column_start":12,"column_end":17},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":23690,"byte_end":23695,"line_start":152,"line_end":152,"column_start":35,"column_end":40},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":24388,"byte_end":24393,"line_start":175,"line_end":175,"column_start":20,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26471,"byte_end":26476,"line_start":239,"line_end":239,"column_start":48,"column_end":53},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26634,"byte_end":26639,"line_start":245,"line_end":245,"column_start":42,"column_end":47},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26745,"byte_end":26750,"line_start":251,"line_end":251,"column_start":24,"column_end":29},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":26843,"byte_end":26853,"line_start":257,"line_end":257,"column_start":21,"column_end":31},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27402,"byte_end":27412,"line_start":276,"line_end":276,"column_start":49,"column_end":59},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27578,"byte_end":27588,"line_start":282,"line_end":282,"column_start":53,"column_end":63},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27734,"byte_end":27744,"line_start":288,"line_end":288,"column_start":31,"column_end":41},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":27866,"byte_end":27876,"line_start":295,"line_end":295,"column_start":34,"column_end":44},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":3340}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/mutex.rs","byte_start":28048,"byte_end":28053,"line_start":302,"line_end":302,"column_start":60,"column_end":65},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":362},"to":{"krate":4,"index":32}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59692,"byte_end":59696,"line_start":40,"line_end":40,"column_start":24,"column_end":28},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":462},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":59787,"byte_end":59791,"line_start":44,"line_end":44,"column_start":39,"column_end":43},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":462},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":60217,"byte_end":60221,"line_start":57,"line_end":57,"column_start":41,"column_end":45},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":462},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":60264,"byte_end":60268,"line_start":58,"line_end":58,"column_start":34,"column_end":38},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":462},"to":{"krate":1,"index":3108}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":60932,"byte_end":60938,"line_start":79,"line_end":79,"column_start":10,"column_end":16},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":61253,"byte_end":61265,"line_start":90,"line_end":90,"column_start":10,"column_end":22},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":63206,"byte_end":63210,"line_start":131,"line_end":131,"column_start":27,"column_end":31},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":73940,"byte_end":73944,"line_start":357,"line_end":357,"column_start":12,"column_end":16},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78857,"byte_end":78861,"line_start":475,"line_end":475,"column_start":24,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":462},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":78962,"byte_end":78966,"line_start":481,"line_end":481,"column_start":21,"column_end":25},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":462},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/once.rs","byte_start":79393,"byte_end":79399,"line_start":497,"line_end":497,"column_start":19,"column_end":25},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":542},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88858,"byte_end":88864,"line_start":111,"line_end":111,"column_start":43,"column_end":49},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":3108}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88923,"byte_end":88929,"line_start":112,"line_end":112,"column_start":50,"column_end":56},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":3120}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":88951,"byte_end":88957,"line_start":114,"line_end":114,"column_start":12,"column_end":18},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":90775,"byte_end":90781,"line_start":177,"line_end":177,"column_start":35,"column_end":41},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":93210,"byte_end":93216,"line_start":250,"line_end":250,"column_start":20,"column_end":26},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100120,"byte_end":100126,"line_start":438,"line_end":438,"column_start":48,"column_end":54},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100497,"byte_end":100503,"line_start":449,"line_end":449,"column_start":42,"column_end":48},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":3086}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100609,"byte_end":100615,"line_start":455,"line_end":455,"column_start":24,"column_end":30},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":3014}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":100713,"byte_end":100728,"line_start":461,"line_end":461,"column_start":26,"column_end":41},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101285,"byte_end":101300,"line_start":480,"line_end":480,"column_start":54,"column_end":69},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":592},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101476,"byte_end":101491,"line_start":486,"line_end":486,"column_start":58,"column_end":73},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":592},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":101655,"byte_end":101676,"line_start":492,"line_end":492,"column_start":44,"column_end":65},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":102293,"byte_end":102314,"line_start":514,"line_end":514,"column_start":29,"column_end":50},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105130,"byte_end":105151,"line_start":606,"line_end":606,"column_start":57,"column_end":78},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":604},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105333,"byte_end":105354,"line_start":612,"line_end":612,"column_start":61,"column_end":82},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":604},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":105506,"byte_end":105522,"line_start":618,"line_end":618,"column_start":29,"column_end":45},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":597},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108024,"byte_end":108040,"line_start":697,"line_end":697,"column_start":57,"column_end":73},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":597},"to":{"krate":1,"index":9745}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108222,"byte_end":108238,"line_start":703,"line_end":703,"column_start":61,"column_end":77},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":597},"to":{"krate":1,"index":9752}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108397,"byte_end":108412,"line_start":709,"line_end":709,"column_start":36,"column_end":51},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":592},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108542,"byte_end":108563,"line_start":717,"line_end":717,"column_start":39,"column_end":60},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":604},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108696,"byte_end":108712,"line_start":725,"line_end":725,"column_start":39,"column_end":55},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":597},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108848,"byte_end":108864,"line_start":733,"line_end":733,"column_start":42,"column_end":58},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":597},"to":{"krate":1,"index":3340}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":108983,"byte_end":108998,"line_start":739,"line_end":739,"column_start":35,"column_end":50},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":592},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":109225,"byte_end":109246,"line_start":746,"line_end":746,"column_start":38,"column_end":59},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":604},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":109531,"byte_end":109547,"line_start":756,"line_end":756,"column_start":38,"column_end":54},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":597},"to":{"krate":1,"index":3351}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":110397,"byte_end":110403,"line_start":783,"line_end":783,"column_start":61,"column_end":67},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":583},"to":{"krate":4,"index":512}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":111716,"byte_end":111722,"line_start":836,"line_end":836,"column_start":68,"column_end":74},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":583},"to":{"krate":4,"index":543}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/rwlock.rs","byte_start":112915,"byte_end":112921,"line_start":880,"line_end":880,"column_start":70,"column_end":76},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":583},"to":{"krate":4,"index":528}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":121041,"byte_end":121045,"line_start":23,"line_end":23,"column_start":24,"column_end":28},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":774},"to":{"krate":0,"index":772}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.4/src/relax.rs","byte_start":122254,"byte_end":122258,"line_start":55,"line_end":55,"column_start":24,"column_end":28},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":778},"to":{"krate":0,"index":772}}]}