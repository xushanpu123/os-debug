{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3","program":"/home/xsp/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zero","--edition=2021","/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=607818678671f4e2","-C","extra-filename=-607818678671f4e2","--out-dir","/home/xsp/mylab/maturin/kernel/target/rls/debug/deps","-L","dependency=/home/xsp/mylab/maturin/kernel/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/xsp/.rustup/toolchains/nightly-2022-04-11-x86_64-unknown-linux-gnu"],"output":"/home/xsp/mylab/maturin/kernel/target/rls/debug/deps/libzero-607818678671f4e2.rmeta"},"prelude":{"crate_id":{"name":"zero","disambiguator":[7556216477240815893,0]},"crate_root":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src","external_crates":[{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[3092364855445609347,0]}},{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9990486623459429287,0]}},{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14554122218834081903,0]}}],"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":340,"byte_end":10990,"line_start":9,"line_end":354,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":340,"byte_end":10990,"line_start":9,"line_end":354,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":39},{"krate":0,"index":44}],"decl_id":null,"docs":" Functions for reading binary data into Rust data structures. All functions\n are zero-allocation.","sig":null,"attributes":[{"value":"/ Functions for reading binary data into Rust data structures. All functions","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":340,"byte_end":418,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ are zero-allocation.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":419,"byte_end":443,"line_start":10,"line_end":10,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":444,"byte_end":447,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ There are functions for reading a single value, an array of values, a single","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":448,"byte_end":528,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ null-terminated UTF-8 string (which should also work with ASCII strings), and","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":529,"byte_end":610,"line_start":13,"line_end":13,"column_start":1,"column_end":82}},{"value":"/ an array of null-terminated strings terminated by another null byte.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":611,"byte_end":683,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":684,"byte_end":687,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Functions preserve the lifetime of the underlying data. These functions are","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":688,"byte_end":767,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ memory safe, although this is in part based on the assumption that the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":768,"byte_end":842,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ client only implements the unsafe trait `Pod` where safe to do so.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":843,"byte_end":913,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":914,"byte_end":917,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Functions assert that the provided data is large enough and aligned. The","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":918,"byte_end":994,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ string functions check that strings are valid UTF-8. There is no checking","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":995,"byte_end":1072,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ that the provided input will produce a valid object (for example, an enum","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1073,"byte_end":1150,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ has a valid discriminant). The user must assert this by implementing the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1151,"byte_end":1227,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ trait `Pod`.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1228,"byte_end":1244,"line_start":24,"line_end":24,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1245,"byte_end":1248,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ There are also unsafe versions of most functions which do not require the","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1249,"byte_end":1326,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ return type to implement `Pod` and which do no checking.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1327,"byte_end":1387,"line_start":27,"line_end":27,"column_start":1,"column_end":61}},{"value":"no_std","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1389,"byte_end":1399,"line_start":29,"line_end":29,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":17},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1593,"byte_end":1597,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"read","qualname":"::read","value":"pub fn read<T: Pod>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Reads a single `T` from `input`.","sig":null,"attributes":[{"value":"/ Reads a single `T` from `input`.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1499,"byte_end":1535,"line_start":35,"line_end":35,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1536,"byte_end":1539,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ `input` must be at least as large as `T`.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1540,"byte_end":1585,"line_start":37,"line_end":37,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":2075,"byte_end":2085,"line_start":51,"line_end":51,"column_start":8,"column_end":18},"name":"read_array","qualname":"::read_array","value":"pub fn read_array<T: Pod>(&[u8]) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Read an array of `T`s from input.","sig":null,"attributes":[{"value":"/ Read an array of `T`s from input.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1896,"byte_end":1933,"line_start":47,"line_end":47,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1934,"byte_end":1937,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ `input` must contain an exact number of `T`s, there must be no extra bytes","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":1938,"byte_end":2016,"line_start":49,"line_end":49,"column_start":1,"column_end":79}},{"value":"/ after the last `T`. `T` may not be zero-sized.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":2017,"byte_end":2067,"line_start":50,"line_end":50,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":21},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":2548,"byte_end":2556,"line_start":63,"line_end":63,"column_start":8,"column_end":16},"name":"read_str","qualname":"::read_str","value":"pub fn read_str(&[u8]) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Read a string from `input`. The string must be a null-terminated UTF-8 string.\n Note that an ASCII C string fulfills this requirement.\n","sig":null,"attributes":[{"value":"/ Read a string from `input`. The string must be a null-terminated UTF-8 string.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":2399,"byte_end":2481,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"/ Note that an ASCII C string fulfills this requirement.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":2482,"byte_end":2540,"line_start":62,"line_end":62,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":2886,"byte_end":2903,"line_start":70,"line_end":70,"column_start":8,"column_end":25},"name":"read_strs_to_null","qualname":"::read_strs_to_null","value":"pub fn read_strs_to_null(&[u8]) -> StrReaderIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which will return a sequence of strings from `input`.\n Each string must be a null-terminated UTF-8 string. The sequence of strings\n is terminated either by a second null byte, or the end of input.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which will return a sequence of strings from `input`.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":2652,"byte_end":2729,"line_start":67,"line_end":67,"column_start":1,"column_end":78}},{"value":"/ Each string must be a null-terminated UTF-8 string. The sequence of strings","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":2730,"byte_end":2809,"line_start":68,"line_end":68,"column_start":1,"column_end":80}},{"value":"/ is terminated either by a second null byte, or the end of input.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":2810,"byte_end":2878,"line_start":69,"line_end":69,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4225,"byte_end":4228,"line_start":94,"line_end":94,"column_start":18,"column_end":21},"name":"Pod","qualname":"::Pod","value":"Pod: Sized","parent":null,"children":[],"decl_id":null,"docs":" Implementing this trait means that the concrete type is plain old data (POD).\n Precisely, by implementing `Pod` the programmer asserts that it is safe to\n read the type from binary slices provided to `read`, etc.","sig":null,"attributes":[{"value":"/ Implementing this trait means that the concrete type is plain old data (POD).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":2982,"byte_end":3063,"line_start":74,"line_end":74,"column_start":1,"column_end":82}},{"value":"/ Precisely, by implementing `Pod` the programmer asserts that it is safe to","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3064,"byte_end":3142,"line_start":75,"line_end":75,"column_start":1,"column_end":79}},{"value":"/ read the type from binary slices provided to `read`, etc.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3143,"byte_end":3204,"line_start":76,"line_end":76,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3205,"byte_end":3208,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Some guidelines for when `Pod` may be implemented (note that whether `Pod`","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3209,"byte_end":3287,"line_start":78,"line_end":78,"column_start":1,"column_end":79}},{"value":"/ should be implemented or not is a function of both the type and the input","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3288,"byte_end":3365,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"/ data. I.e., just because a type is `Pod` in one context does not mean it","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3366,"byte_end":3442,"line_start":80,"line_end":80,"column_start":1,"column_end":77}},{"value":"/ should be in another):","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3443,"byte_end":3469,"line_start":81,"line_end":81,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3470,"byte_end":3473,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ * primitive numeric types (`u8`, `i64`, `f32`, etc.) are fine,","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3474,"byte_end":3540,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/ * bools are fine, if the provided data ensures they may have only the values","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3541,"byte_end":3621,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/   `0` or `1` (note that this is a stricter requirement that C),","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3622,"byte_end":3689,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/ * structs may be `Pod` if they have a `repr(C)` or `repr(packed)` attribute","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3690,"byte_end":3769,"line_start":86,"line_end":86,"column_start":1,"column_end":80}},{"value":"/   to prevent rustc from performing field reordering. The former requires that","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3770,"byte_end":3851,"line_start":87,"line_end":87,"column_start":1,"column_end":82}},{"value":"/   the supplied data has the correct alignment.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3852,"byte_end":3902,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/ * enums must have valid discriminants in the supplied data, this is probably","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3903,"byte_end":3983,"line_start":89,"line_end":89,"column_start":1,"column_end":81}},{"value":"/   only feasible if they have a specified representation,","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":3984,"byte_end":4044,"line_start":90,"line_end":90,"column_start":1,"column_end":61}},{"value":"/ * there must not be invalid enum variants in the data,","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4045,"byte_end":4103,"line_start":91,"line_end":91,"column_start":1,"column_end":59}},{"value":"/ * any kind of pointer is probably a bad idea. Theoretically one could make","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4104,"byte_end":4182,"line_start":92,"line_end":92,"column_start":1,"column_end":79}},{"value":"/   raw pointers work.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4183,"byte_end":4207,"line_start":93,"line_end":93,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":34},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4570,"byte_end":4581,"line_start":108,"line_end":108,"column_start":15,"column_end":26},"name":"read_unsafe","qualname":"::read_unsafe","value":"pub unsafe fn read_unsafe<T: Sized>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Reads a `T` from `input` with no checks.\n","sig":null,"attributes":[{"value":"/ Reads a `T` from `input` with no checks.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4511,"byte_end":4555,"line_start":107,"line_end":107,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4722,"byte_end":4739,"line_start":113,"line_end":113,"column_start":15,"column_end":32},"name":"read_array_unsafe","qualname":"::read_array_unsafe","value":"pub unsafe fn read_array_unsafe<T: Sized>(&[u8]) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Reads an array of `T`s from `input` with no checks.\n","sig":null,"attributes":[{"value":"/ Reads an array of `T`s from `input` with no checks.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4652,"byte_end":4707,"line_start":112,"line_end":112,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4956,"byte_end":4971,"line_start":119,"line_end":119,"column_start":15,"column_end":30},"name":"read_str_unsafe","qualname":"::read_str_unsafe","value":"pub unsafe fn read_str_unsafe(&[u8]) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Reads a null-terminated string from `input` with no checks.\n","sig":null,"attributes":[{"value":"/ Reads a null-terminated string from `input` with no checks.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4878,"byte_end":4941,"line_start":118,"line_end":118,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":45},"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":5192,"byte_end":5209,"line_start":126,"line_end":126,"column_start":12,"column_end":29},"name":"StrReaderIterator","qualname":"::StrReaderIterator","value":"StrReaderIterator {  }","parent":null,"children":[{"krate":0,"index":47}],"decl_id":null,"docs":" Iterates over `self.data`, yielding strings (null-terminated in `self.data`).\n See `read_strs_to_null`.\n","sig":null,"attributes":[{"value":"/ Iterates over `self.data`, yielding strings (null-terminated in `self.data`).","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":5046,"byte_end":5127,"line_start":123,"line_end":123,"column_start":1,"column_end":82}},{"value":"/ See `read_strs_to_null`.","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":5128,"byte_end":5156,"line_start":124,"line_end":124,"column_start":1,"column_end":29}}]}],"impls":[{"id":10,"kind":"Direct","span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":5261,"byte_end":5278,"line_start":130,"line_end":130,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":4230,"byte_end":4235,"line_start":94,"line_end":94,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3113},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/xsp/.cargo/registry/src/github.com-1ecc6299db9ec823/zero-0.1.3/src/lib.rs","byte_start":5261,"byte_end":5278,"line_start":130,"line_end":130,"column_start":23,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":45},"to":{"krate":1,"index":8042}}]}